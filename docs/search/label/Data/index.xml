<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data on FOSS Trading</title>
    <link>https://blog.fosstrading.com/search/label/Data.html</link>
    <description>Recent content in Data on FOSS Trading</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 19 Jun 2023 12:14:00 -0500</lastBuildDate><atom:link href="https://blog.fosstrading.com/search/label/Data/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Streaming Market Data with TimeBase</title>
      <link>https://blog.fosstrading.com/2023/06/streaming-data-with-timebase.html</link>
      <pubDate>Mon, 19 Jun 2023 12:14:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2023/06/streaming-data-with-timebase.html</guid>
      <description>&lt;p&gt;This is the first post of a series on using &lt;a href=&#34;https://timebase.info/&#34;&gt;TimeBase&lt;/a&gt; to stream real-time market data. TimeBase is a high performance event-based time series database and message broker. I used it on a proprietary trading desk that made markets in futures, and currently use it to build and test equity trading strategies. It was &lt;a href=&#34;https://github.com/finos/TimeBase-CE/&#34;&gt;released as open-source&lt;/a&gt; in February 2021.&lt;/p&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;h3 id=&#34;whats-your-problem&#34;&gt;What&amp;rsquo;s Your Problem?&lt;/h3&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;!-- raw HTML omitted --&gt;
&lt;p&gt;&lt;a href=&#34;https://timebase.info/&#34;&gt;TimeBase&lt;/a&gt; addresses several key needs in automated trading. You need to process large amounts of real-time market data. This includes trades, best bid/offer, and/or the entire limit order book. You use this data to calculate indicators/features, determine when and where to place orders, monitoring unrealized P&amp;amp;L, and monitoring/managing risk of your positions.&lt;/p&gt;
&lt;p&gt;All data in the trading system needs to be processed quickly and absolutely must be processed in strict time order. This is not trivial when you need to interleave data from multiple sources (e.g. exchanges and the trading system itself).
The &lt;a href=&#34;https://medium.com/prooftrading/proof-engineering-the-algorithmic-trading-platform-b9c2f195433d#d545&#34;&gt;System Architecture&lt;/a&gt; section of &amp;ldquo;The Algorithmic Trading Platform&amp;rdquo; by Prerak Sanghvi describes the benefits of using a strictly time-sequenced stream of events. To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronized: every system component always receives the same data in the same order.&lt;/li&gt;
&lt;li&gt;Observable: the system is deterministic and can be debugged offline by replaying the data.&lt;/li&gt;
&lt;li&gt;Auditable: You can re-create the state of the system at any point in time.&lt;/li&gt;
&lt;li&gt;Streamlined: Tasks like logging and persisting to disk can be delegated to components that are off the critical path.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data also needs be stored for analysis and debugging. Analysis includes things like running backtests, post-trade evaluation, and investigating market behavior. &lt;a href=&#34;https://medium.com/prooftrading/selecting-a-database-for-an-algorithmic-trading-system-2d25f9648d02&#34;&gt;&amp;ldquo;Selecting a Database for an Algorithmic Trading System&amp;rdquo;
&lt;/a&gt; by Prerak Sanghvi discusses the necessary components of a time-series database for algorithmic trading. To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast data ingest: millions of records per second (quote data can be 100+ million records per day)&lt;/li&gt;
&lt;li&gt;Ability to process large amounts of historical data for patterns and trends&lt;/li&gt;
&lt;li&gt;Time series operations and real-time analytics (e.g. window functions, aggregations, as-of joins)&lt;/li&gt;
&lt;li&gt;Expressive query language&lt;/li&gt;
&lt;li&gt;Optimized on-disk layout&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;timebase-vs-alternatives&#34;&gt;TimeBase vs Alternatives&lt;/h3&gt;
&lt;p&gt;Why use TimeBase instead of other open-source projects like &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;, &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, &lt;a href=&#34;https://www.influxdata.com/&#34;&gt;InfluxDB&lt;/a&gt;, &lt;a href=&#34;https://www.timescale.com/&#34;&gt;TimeScaleDB&lt;/a&gt;, or &lt;a href=&#34;https://clickhouse.com/&#34;&gt;ClickHouse&lt;/a&gt;? The main reason is that TimeBase is both a &lt;a href=&#34;https://en.wikipedia.org/wiki/Message_broker&#34;&gt;message broker&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; a &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_series_database&#34;&gt;time-series database&lt;/a&gt;. The TimeBase website has its own &lt;a href=&#34;https://timebase.info/why-timebase/&#34;&gt;&amp;ldquo;Why TimeBase&amp;rdquo; page&lt;/a&gt; and pages that compare popular &lt;a href=&#34;https://timebase.info/why-timebase/tsdb-comparison.html&#34;&gt;time-series databases&lt;/a&gt; and &lt;a href=&#34;https://timebase.info/why-timebase/message-brokers-comparison.html&#34;&gt;message brokers&lt;/a&gt;. Here&amp;rsquo;s a summary of the benefits of TimeBase from those pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Based on configuration, it supports microsecond latencies or the ability to handle millions of messages per second on commodity hardware.&lt;/li&gt;
&lt;li&gt;Enforces stream schemas with heterogeneous and potentially complex &lt;a href=&#34;https://kb.timebase.info/community/overview/messages&#34;&gt;message structures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The same &lt;a href=&#34;https://kb.timebase.info/community/development/libs&#34;&gt;APIs&lt;/a&gt; can be used to stream real-time data &lt;em&gt;and&lt;/em&gt; replay historical data.&lt;/li&gt;
&lt;li&gt;Able to &lt;a href=&#34;https://kb.timebase.info/community/technology/replication/replication_intro&#34;&gt;replicate data&lt;/a&gt; to other TimeBase instances or applications.&lt;/li&gt;
&lt;li&gt;The open-source community edition has multiple crypto exchange data connectors. The enterprise edition has 50+ built-in data connectors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;timebase-structure&#34;&gt;TimeBase Structure&lt;/h3&gt;
&lt;p&gt;This is a high-level summary of the &lt;a href=&#34;https://timebase.info/architecture.html&#34;&gt;TimeBase architecture page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data connectors&lt;/strong&gt; handle connecting to external data sources and translating their data into the TimeBase format. There are many open source &lt;a href=&#34;https://github.com/epam/TimebaseCryptoConnectors&#34;&gt;crypto exchange data connectors&lt;/a&gt;. The enterprise edition has another 50+ data connectors to all major exchanges and many data vendors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The message broker&lt;/strong&gt; provides a &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;publish/subscribe&lt;/a&gt; pattern to write/read streaming data. The data is processed via readers and writers to &lt;a href=&#34;https://kb.timebase.info/community/overview/streams&#34;&gt;streams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Writers can only write to one stream. Readers can consume multiple streams simultaneously and the messages from every stream are interleaved so that every message consumed is always in guaranteed time order regardless of which stream they come from. It is extremely important that every consumer receives data strictly sequenced by time!&lt;/p&gt;
&lt;p&gt;There are two types of streams, durable and transient. Durable streams are persisted to disk. Transient streams are only in memory and can be &lt;em&gt;lossy&lt;/em&gt; or &lt;em&gt;lossless&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Writers to &lt;em&gt;lossy&lt;/em&gt; streams are not blocked by slow readers, so slow readers may not receive every message but always receive the next available message once they finish processing a message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writers to &lt;em&gt;lossless&lt;/em&gt; streams are blocked by slow readers, so every reader always receives every message and every reader can only process data as fast as the slowest reader.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The database&lt;/strong&gt; handles reading/writing data from/to disk, importing and exporting data, replicating data to other applications, and can aggregate data to regular bars. It has a query language (&lt;a href=&#34;https://kb.timebase.info/community/development/qql/QQL%205.5/qql-tut-intro&#34;&gt;QQL&lt;/a&gt;) you can use to extract, filter, aggregate, and transform data in streams.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also an open-source &lt;a href=&#34;https://kb.timebase.info/community/development/tools/Web%20Admin/admin_config_ce&#34;&gt;Web Administrator&lt;/a&gt; you can use to manipulate streams (create, delete, edit, import/export). It also allows you to view data, including monitoring live data streaming in to the database.&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/h3&gt;
&lt;p&gt;Later posts in this series will cover at least the topics below. Please leave a comment or contact me with any other things you would like to see!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building and running TimeBase from source/Docker&lt;/li&gt;
&lt;li&gt;Building and running the Web Administrator from source/Docker&lt;/li&gt;
&lt;li&gt;Setting up a data connector&lt;/li&gt;
&lt;li&gt;Introduction to the Web Administrator (viewing/monitoring data, import/export)&lt;/li&gt;
&lt;li&gt;Introduction to QQL, the quant query language&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://robotjames.com/&#34;&gt;TheRobotJames&lt;/a&gt; for helpful feedback!&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g.
      &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/blotter/&#34;&gt;blotter&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/quantstrat/&#34;&gt;quantstrat&lt;/a&gt;,
      etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Creating Financial Instrument metadata in R</title>
      <link>https://blog.fosstrading.com/2011/07/creating-financial-instrument-metadata.html</link>
      <pubDate>Wed, 27 Jul 2011 22:16:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2011/07/creating-financial-instrument-metadata.html</guid>
      <description>&lt;p&gt;This is a guest post by &lt;a href=&#34;https://quantstrattrader.wordpress.com/about/&#34;&gt;Ilya Kipnis&lt;/a&gt;. He blogs at &lt;a href=&#34;https://quantstrattrader.wordpress.com&#34;&gt;QuantStrat TradeR&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When trading stocks in a single currency, instrument &lt;a href=&#34;http://en.wikipedia.org/wiki/Metadata&#34;&gt;metadata&lt;/a&gt; can be safely ignored because the multiplier is 1 and the currencies are all the same.  When doing analysis on fixed income products, options, futures, or other complex derivative instruments, the data defining the properties of these instruments becomes critical to tasks like accounting for value of trades, or comparing notional value between more than one instrument. The &lt;a href=&#34;http://r-forge.r-project.org/R/?group_id=316&#34;&gt;FinancialInstrument&lt;/a&gt; package provides a construct for storing metadata for tradeable contracts (referred to as instruments, e.g. stocks, futures, options, etc.) and their root representations.  It can be used to create any asset class and complex derivatives, across multiple currencies. &lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;http://blog.fosstrading.com/2009/11/tactical-asset-allocation-using-blotter.html&#34;&gt;tactical asset allocation using blotter&lt;/a&gt;, Joshua Ulrich used FinancialInstrument (blotter depends on it) to create a stock portfolio.  FinancialInstrument is also a required dependency of the quantstrat quantitative strategy framework in R (quantstrat will be covered in a later post).&lt;/p&gt;
&lt;p&gt;Creating a list of historical symbols is a recurring challenge with historical data on derivative instruments.  These symbols tend to follow a deterministic pattern and FinancialInstrument provides utility functions to create the symbols traded over specific periods of time. These symbols could then be used to request historical data from a data vendor or to construct instrument objects in R.&lt;/p&gt;
&lt;p&gt;The simplest function for generating a series of symbols is &lt;code&gt;build_series_symbols()&lt;/code&gt;.  Let&amp;rsquo;s look at it with a small example using crude oil (CL) and STOXX (STXE) futures:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# install.packages(&amp;#34;FinancialInstrument&amp;#34;, repos=&amp;#34;http://R-Forge.R-project.org&amp;#34;)  &lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FinancialInstrument&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;primary_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;CL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month_cycle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;F,G,H,J,K,M,N,Q,U,V,X,Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;primary_id&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;STXE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;month_cycle&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;H,M,U,Z&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;  
&lt;span class=&#34;c1&#34;&gt;##   primary_id               month_cycle  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## 1         CL   F,G,H,J,K,M,N,Q,U,V,X,Z  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## 2       STXE                   H,M,U,Z  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;Data&lt;/code&gt; object contains two columns.  The &lt;code&gt;primary_id&lt;/code&gt; is the root contract that identifies the instrument, and the &lt;code&gt;month_cycle&lt;/code&gt; defines the months the contracts trade in (e.g. &amp;ldquo;H,M,U,Z&amp;rdquo; for Mar/Jun/Sep/Dec).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build_series_symbols()&lt;/code&gt; only needs &lt;code&gt;Data&lt;/code&gt; and &lt;code&gt;yearlist&lt;/code&gt;. &lt;code&gt;yearlist&lt;/code&gt; is the suffix for expiration years and 0, 1, 2 represent 2010, 2011, 2012 in this example.  &lt;code&gt;build_series_symbols()&lt;/code&gt; returns a vector of series symbols that we could use to request data or create &lt;code&gt;future_series&lt;/code&gt; instruments.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;nf&#34;&gt;build_series_symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;yearlist&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;span class=&#34;c1&#34;&gt;## [1] &amp;#34;CLF0&amp;#34;   &amp;#34;CLG0&amp;#34;   &amp;#34;CLH0&amp;#34;   &amp;#34;CLJ0&amp;#34;   &amp;#34;CLK0&amp;#34;   &amp;#34;CLM0&amp;#34;   &amp;#34;CLN0&amp;#34;   &amp;#34;CLQ0&amp;#34;   &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [9] &amp;#34;CLU0&amp;#34;   &amp;#34;CLV0&amp;#34;   &amp;#34;CLX0&amp;#34;   &amp;#34;CLZ0&amp;#34;   &amp;#34;STXEH0&amp;#34; &amp;#34;STXEM0&amp;#34; &amp;#34;STXEU0&amp;#34; &amp;#34;STXEZ0&amp;#34;  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [17] &amp;#34;CLF1&amp;#34;   &amp;#34;CLG1&amp;#34;   &amp;#34;CLH1&amp;#34;   &amp;#34;CLJ1&amp;#34;   &amp;#34;CLK1&amp;#34;   &amp;#34;CLM1&amp;#34;   &amp;#34;CLN1&amp;#34;   &amp;#34;CLQ1&amp;#34;   &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [25] &amp;#34;CLU1&amp;#34;   &amp;#34;CLV1&amp;#34;   &amp;#34;CLX1&amp;#34;   &amp;#34;CLZ1&amp;#34;   &amp;#34;STXEH1&amp;#34; &amp;#34;STXEM1&amp;#34; &amp;#34;STXEU1&amp;#34; &amp;#34;STXEZ1&amp;#34;  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [33] &amp;#34;CLF2&amp;#34;   &amp;#34;CLG2&amp;#34;   &amp;#34;CLH2&amp;#34;   &amp;#34;CLJ2&amp;#34;   &amp;#34;CLK2&amp;#34;   &amp;#34;CLM2&amp;#34;   &amp;#34;CLN2&amp;#34;   &amp;#34;CLQ2&amp;#34;   &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;## [41] &amp;#34;CLU2&amp;#34;   &amp;#34;CLV2&amp;#34;   &amp;#34;CLX2&amp;#34;   &amp;#34;CLZ2&amp;#34;   &amp;#34;STXEH2&amp;#34; &amp;#34;STXEM2&amp;#34; &amp;#34;STXEU2&amp;#34; &amp;#34;STXEZ2&amp;#34;  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A more complicated task is to create symbols for exchange guaranteed calendar spreads.  The &lt;code&gt;build_spread_symbols()&lt;/code&gt; function creates a vector of symbols for spreads of securities (currently coded for futures calendar spreads but can be extended and generalized) in a very shorthand notation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;build_spread_symbols()&lt;/code&gt; accepts instrument specifications via either a file path or (preferably) a data frame (using the file or data arguments, respectively). Output can be assigned to an object or written to a file using the optional &lt;code&gt;outputfile&lt;/code&gt; argument.  The default starting date is the current date, but the user can manually set a starting date (e.g. historical dates for backtesting, and future dates to create lists of instruments to be traded in the future).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# read in data that would be suitable for load.instruments on root contracts  &lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# series_data.csv can be downloaded here:&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# https://docs.google.com/leaf?id=0B8wl4QBejPGiMjI2NTQzZjEtZDRkNC00MDRjLWI2ZDgtMzhjOTM5ZGFkYmFk&amp;amp;hl=en_US)&amp;#34;&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;read.csv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;series_data.csv&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;stringsAsFactors&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;c1&#34;&gt;# set the type to guaranteed_spread  &lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;guaranteed_spread&amp;#34;&lt;/span&gt;  
&lt;span class=&#34;c1&#34;&gt;# call build_spread_symbols  &lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;build_spread_symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data[6&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;start_date&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;2010-01-01&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The critical fields in the data (CSV or data frame) are the &lt;code&gt;primary_id&lt;/code&gt;, the type (e.g. future, calendar spread, inter-commodity spread, etc.), the &lt;code&gt;month_cycle&lt;/code&gt;, and the &lt;code&gt;active_months&lt;/code&gt; (how many contracts to display).  For instance, an &lt;code&gt;active_months&lt;/code&gt; value of 12 on a contract that trades quarterly (&amp;ldquo;H,M,U,Z&amp;rdquo;) would create front month contracts for the next 3 years.  An &lt;code&gt;active_months&lt;/code&gt; value of 6 on this same quarterly contract would produce 1.5 years.  On a contract that trades 12 months a year (&amp;ldquo;F,G,H,J,K,M,N,Q,U,V,X,Z&amp;rdquo;), an &lt;code&gt;active_months&lt;/code&gt; value of 12 would produce 1 year of contracts, and a value of 6 would only produce half a year.&lt;/p&gt;
&lt;p&gt;Lastly, the &lt;code&gt;contracts_ahead&lt;/code&gt; field specifies the month spread on calendar spread type securities.  Note that these are &lt;strong&gt;contracts&lt;/strong&gt; ahead and not months ahead.  For example, if you consider a contract trading &amp;ldquo;H,M,U,Z&amp;rdquo; vs. a contract trading &amp;ldquo;F,G,H,J,K,M,N,Q,U,V,X,Z&amp;rdquo;, a value of 1 for the &amp;ldquo;H,M,U,Z&amp;rdquo; contract would create an H1-M1 spread or the like, while a value of 1 with the 12-month traded contract would create an F1-G1 spread.&lt;/p&gt;
&lt;p&gt;The rest of the columns simply get carried over, for further use in other programs/scripts/procedures, such as the &lt;code&gt;load.instruments()&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;About the Author: Ilya Kipnis holds a Master&amp;rsquo;s degree in Statistics from Rutgers, and uses and contributes to the R packages blotter, FinancialInstrument, and quantstrat. Ilya may be contacted for consulting and full-time opportunities in finance at &lt;a href=&#34;mailto:ilya.kipnis@gmail.com&#34;&gt;ilya.kipnis@gmail.com&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>opentick alternatives</title>
      <link>https://blog.fosstrading.com/2009/11/opentick-alternatives.html</link>
      <pubDate>Thu, 05 Nov 2009 18:54:00 -0600</pubDate>
      
      <guid>https://blog.fosstrading.com/2009/11/opentick-alternatives.html</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been getting a bit of traffic from people searching for opentick &lt;a href=&#34;http://blog.fosstrading.com/2009/04/opentick-is-no-more.html&#34;&gt;(the defunct company)&lt;/a&gt;, so I&amp;rsquo;ve started a list of similar (but non-free) data providers.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not affiliated with any of these vendors, and the list is in no particular order. I&amp;rsquo;ll update this post as more information becomes available.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.iqfeed.net/&#34;&gt;IQFeed&lt;/a&gt;&lt;br&gt;
- &lt;a href=&#34;http://www.iqfeed.net/index.cfm?displayaction=data&amp;amp;section=services&#34;&gt;features&lt;/a&gt;, &lt;a href=&#34;http://www.iqfeed.net/index.cfm?displayaction=data&amp;amp;section=fees&#34;&gt;fees&lt;/a&gt;, &lt;a href=&#34;http://www.iqfeed.net/index.cfm?displayaction=developer&amp;amp;section=main&#34;&gt;API&lt;/a&gt;**&lt;br&gt;
- starts at $60/month*&lt;br&gt;
- OS: Windows&lt;br&gt;
- Same API as &lt;a href=&#34;http://www.dtniq.com/&#34;&gt;DTN.IQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.esignal.com/&#34;&gt;eSignal&lt;/a&gt;&lt;br&gt;
- &lt;a href=&#34;http://www.esignal.com/esignal/features_exp.aspx?name=all&#34;&gt;features&lt;/a&gt;, &lt;a href=&#34;http://www.esignal.com/esignal/pricing.aspx&#34;&gt;fees&lt;/a&gt;, &lt;a href=&#34;http://www.esignal.com/esignal/features_exp.aspx?name=activex&#34;&gt;API&lt;/a&gt;**&lt;br&gt;
- starts at $125/month*&lt;br&gt;
- OS: Windows&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.eoddata.com/Default.aspx&#34;&gt;eoddata&lt;/a&gt;&lt;br&gt;
- &lt;a href=&#34;http://www.eoddata.com/Products/Default.aspx&#34;&gt;features, fees, API&lt;/a&gt;&lt;br&gt;
- some data are free, as low as 1-minute intraday data for $19.95/month&lt;br&gt;
- OS: Windows&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://www.marketfeed.com/&#34;&gt;Marketfeed&lt;/a&gt;&lt;br&gt;
- &lt;a href=&#34;http://www.marketfeed.com/Integration_Basic.htm&#34;&gt;features, fees, API&lt;/a&gt;**&lt;br&gt;
- starts at $20/month*, access via API starts at $400/year&lt;br&gt;
- OS: Windows&lt;/p&gt;
&lt;p&gt;Notes:&lt;br&gt;
* plus exchange fees&lt;br&gt;
** API access may cost extra&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Xasax closes shop</title>
      <link>https://blog.fosstrading.com/2009/10/xasax-closes-shop.html</link>
      <pubDate>Sun, 18 Oct 2009 11:21:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2009/10/xasax-closes-shop.html</guid>
      <description>&lt;p&gt;Six months after &lt;a href=&#34;http://blog.fosstrading.com/2009/04/opentick-is-no-more.html&#34;&gt;shutting down opentick completely&lt;/a&gt; Xasax (opentick&amp;rsquo;s parent company) has followed suit.&lt;/p&gt;
&lt;p&gt;It looks like Xasax hit funding problems in August&amp;hellip; &lt;a href=&#34;http://www.watersonline.com/public/showPage.html?page=imd_index&#34;&gt;Inside Market Data&lt;/a&gt; mentions the above in &lt;a href=&#34;http://www.watersonline.com/public/showPage.html?page=868403&#34;&gt;this story&lt;/a&gt;. Here is the &lt;a href=&#34;http://www.watersonline.com/public/showPage.html?page=868401&#34;&gt;full story&lt;/a&gt; (subscription required).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>opentick is no more</title>
      <link>https://blog.fosstrading.com/2009/04/opentick-is-no-more.html</link>
      <pubDate>Fri, 17 Apr 2009 14:46:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2009/04/opentick-is-no-more.html</guid>
      <description>&lt;p&gt;After a year of &amp;ldquo;we plan to accept new subscribers shortly&amp;rdquo;, &lt;a href=&#34;http://www.opentick.com/&#34;&gt;opentick&lt;/a&gt; has shut its doors completely. As of March 20th, the opentick service is no longer available.&lt;/p&gt;
&lt;p&gt;From &lt;a href=&#34;http://www.opentick.com/&#34;&gt;opentick.com&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3/16/2009&lt;/p&gt;
&lt;p&gt;To opentick subscribers, friends, supporters, contributors and the rest of the community&amp;hellip;&lt;/p&gt;
&lt;p&gt;It has been quite a journey for opentick, and for those of you who have been with us for the ride we cannot thank you enough for the support, contributions and guidance you have given us over the course of the last 5 years. We could not have come as far as we have without you.&lt;/p&gt;
&lt;p&gt;However, we are sad to say that the time has come for us to close the doors for opentick. However, this isn&amp;rsquo;t goodbye. In fact, it&amp;rsquo;s a new beginning. We will be introducing a fresh service with all the bells and whistles we&amp;rsquo;ve been slaving on over the course of the last year under a new name, a new website and a new level of service. Check back here in the near future for more information about the forthcoming new company and service. Of course amongst all these changes, there are some things that will remain the same - we still aim to provide a reliable free market data service, with an open architecture for a wide range of software platform support.&lt;/p&gt;
&lt;p&gt;If you are a current paying subscriber, this March billing cycle will be your final billing cycle; at your next billing date service will be terminated. If you are a delayed or historical data user not currently paying for service, your account will be deactivated as of Friday, March 20th.&lt;/p&gt;
&lt;p&gt;Sincerely,&lt;br&gt;
opentick Staff&lt;/p&gt;
&lt;p&gt;One day, we shall come back. Yes, we shall come back. Until then, there must be no regrets, no tears, no anxieties. Just go forward in all your beliefs, and prove to us we are not mistaken in ours.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;m not optimistic their new offering (most likely their sister company, &lt;a href=&#34;http://www.xasax.com/&#34;&gt;Xasax&lt;/a&gt;) will be available anytime soon. The managers of the two companies sub-optimally managed expectations with opentick and potential Xasax customers are sure to keep that in mind.&lt;/p&gt;
&lt;p&gt;At least I learned quite a bit creating the &amp;lsquo;opentick&amp;rsquo; package, since it is now useless&amp;hellip; perhaps Xasax will have a similar API, but I won&amp;rsquo;t get my hopes up.&lt;/p&gt;
&lt;p&gt;Related Posts:&lt;br&gt;
&lt;a href=&#34;http://blog.fosstrading.com/2009/10/xasax-closes-shop.html&#34;&gt;Xasax closes shop&lt;/a&gt;&lt;br&gt;
&lt;a href=&#34;http://blog.fosstrading.com/2009/11/opentick-alternatives.html&#34;&gt;opentick alternatives&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
