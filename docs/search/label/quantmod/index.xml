<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>quantmod on FOSS Trading</title>
    <link>https://blog.fosstrading.com/search/label/quantmod/</link>
    <description>Recent content in quantmod on FOSS Trading</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 22 Aug 2023 11:41:57 -0500</lastBuildDate><atom:link href="https://blog.fosstrading.com/search/label/quantmod/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>quantmod_0.4.25 on CRAN</title>
      <link>https://blog.fosstrading.com/2023/08/quantmod-0-4-25-on-cran/</link>
      <pubDate>Tue, 22 Aug 2023 11:41:57 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2023/08/quantmod-0-4-25-on-cran/</guid>
      <description>&lt;p&gt;An updated version of &lt;a href=&#34;http://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt; is now on &lt;a href=&#34;http://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt;.
It includes an awesome new feature that allows you to import up to 7 days of intraday data from Yahoo Finance!&lt;/p&gt;
&lt;h3 id=&#34;new-features&#34;&gt;New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getSymbols.yahoo()&lt;/code&gt; can import up to 7 days of intraday data! Thanks to &lt;a href=&#34;https://github.com/kapsner&#34;&gt;@kapsner&lt;/a&gt; for the report and patch! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/351&#34;&gt;#351&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/381&#34;&gt;#381&lt;/a&gt;) It will throw a warning if you try to request more than 7 days of intraday data, but you can suppress the warning (thanks to &lt;a href=&#34;https://dirk.eddelbuettel.com/&#34;&gt;Dirk Eddelbuettel&lt;/a&gt;). (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/399&#34;&gt;#399&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add warning if &lt;code&gt;getSymbols()&lt;/code&gt; is called with tickers that are reserved words because accessing them requires back-quotes (e.g. &lt;code&gt;NA&lt;/code&gt;). (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/401&#34;&gt;#401&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fix &lt;code&gt;getQuote.yahoo()&lt;/code&gt; for API changes. Thanks to Ethan B. Smith for the report and patch! Also add error message for users in GDPR countries, since we cannot automatically consent to GDPR and the request fails without consent. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/392&#34;&gt;#392&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/393&#34;&gt;#393&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/395&#34;&gt;#395&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix &lt;code&gt;getQuote.yahoo()&lt;/code&gt; when the user only requested metrics that do not have have a value for &amp;lsquo;regularMarketTime&amp;rsquo;. Set the value to NA in these cases so the output remains the same regardless of whether the endpoint returns a &amp;lsquo;regularMarketTime&amp;rsquo; or not. Thanks to &lt;a href=&#34;https://github.com/mehdiMBH&#34;&gt;@mehdiMBH&lt;/a&gt; for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/255&#34;&gt;#255&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add fields to &lt;code&gt;getQuote.yahoo()&lt;/code&gt; that are returned when no fields are explicitly requested. Thanks to &lt;a href=&#34;https://github.com/Courvoisier13&#34;&gt;@Courvoisier13&lt;/a&gt; for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/335&#34;&gt;#335&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fix &lt;code&gt;allReturns()&lt;/code&gt; when &amp;lsquo;subset&amp;rsquo; is specified. Thanks to &lt;a href=&#34;https://github.com/Panagis1980&#34;&gt;@Panagis1980&lt;/a&gt; for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/402&#34;&gt;#402&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g. &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;, etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;

    &lt;p&gt;I look forward to your questions and feedback! If you have a question, please ask on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; and use the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;[r]&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/tagged/quantmod&#34;&gt;[quantmod]&lt;/a&gt; tags.  Or you can send an email to the &lt;a href=&#34;https://stat.ethz.ch/mailman/listinfo/r-sig-finance&#34;&gt;R-SIG-Finance&lt;/a&gt; mailing list (you must subscribe to post). Open an &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues&#34;&gt;issue on GitHub&lt;/a&gt; if you find a bug or want to request a feature. Please &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/blob/master/.github/CONTRIBUTING.md&#34;&gt;read the contributing guide&lt;/a&gt; first! It will help save time for both of us. ;-)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>getSymbols Rebooted</title>
      <link>https://blog.fosstrading.com/2023/05/getsymbols-rebooted/</link>
      <pubDate>Mon, 22 May 2023 10:14:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2023/05/getsymbols-rebooted/</guid>
      <description>&lt;p&gt;quantmod and &lt;code&gt;getSymbols()&lt;/code&gt; have been a core part of the R/Finance ecosystem for over 15 years. We want to change some things, but they would break existing code. We can make these changes in the new &lt;a href=&#34;https://github.com/joshuaulrich/rfimport/&#34;&gt;&amp;lsquo;rfimport&amp;rsquo;&lt;/a&gt; package instead.&lt;/p&gt;
&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;
&lt;p&gt;The quantmod package has been a core part of the R/Finance ecosystem for over 15 years. It&amp;rsquo;s awesome that the package is so popular, but that also comes with responsibility to maintain backward compatibility. Breaking changes may break code used for making business decisions, research, production, blog posts, books, courses, answers on &lt;a href=&#34;https://stackoverflow.com&#34;&gt;stackoverflow&lt;/a&gt;, and much more. We take this responsibility seriously, and do our best to keep functions backward compatible. Sometimes breaking changes are necessary (e.g. bug fixes, changes to external data sources, etc.), but we do our best to make them carefully, with plenty of warning and lead time for users to adjust their code.&lt;/p&gt;
&lt;h3 id=&#34;motivation&#34;&gt;Motivation&lt;/h3&gt;
&lt;p&gt;There are things in quantmod that we want to change, but they would certainly break existing code. No matter how much we&amp;rsquo;d like to make those changes, we can&amp;rsquo;t justify breaking a large portion of the code our community has written in the past 15+ years.&lt;/p&gt;
&lt;p&gt;We can create a new package instead of making these changes in quantmod. &lt;a href=&#34;https://github.com/joshuaulrich/rfimport/&#34;&gt;&amp;lsquo;rfimport&amp;rsquo;&lt;/a&gt; is where we will work on new implementations that improve on the pieces in &lt;code&gt;getSymbols()&lt;/code&gt; that we would like to change. This code is &lt;em&gt;extremely alpha&lt;/em&gt;. This is the time to provide feedback, suggestions, feature requests, etc. Know that we will break things, maybe without warning. You should consider the API unstable until the 1.0.0 release.&lt;/p&gt;
&lt;h3 id=&#34;refresher-on-how-getsymbols-works&#34;&gt;Refresher on how &lt;code&gt;getSymbols()&lt;/code&gt; works&lt;/h3&gt;
&lt;p&gt;By default &lt;code&gt;getSymbols()&lt;/code&gt; creates objects in the environment it&amp;rsquo;s called from, and it returns the value of the &lt;code&gt;Symbols&lt;/code&gt; argument. It&amp;rsquo;s good practice for functions to avoid changing anything in the user&amp;rsquo;s environment (this is called having side-effects). It&amp;rsquo;s better for functions to only return a value, like &lt;code&gt;getSymbols(..., auto.assign = FALSE)&lt;/code&gt; does. &lt;code&gt;getSymbols()&lt;/code&gt; does not support &lt;code&gt;auto.assign = FALSE&lt;/code&gt; for more than one symbol.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getSymbols()&lt;/code&gt; also uses functionality that was formerly provided by the archived &lt;a href=&#34;https://cran.r-project.org/package=Defaults&#34;&gt;&amp;lsquo;Defaults&amp;rsquo;&lt;/a&gt; package. This functionality allows users to set default values for &lt;code&gt;getSymbols()&lt;/code&gt; source method arguments (e.g. &lt;code&gt;return.class = &amp;quot;data.frame&amp;quot;&lt;/code&gt;). This is also a side-effect because it makes &lt;code&gt;getSymbols()&lt;/code&gt; depend on something other than argument values.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getSymbols()&lt;/code&gt; specifies the data sources via its &lt;code&gt;src&lt;/code&gt; argument, and uses the &lt;code&gt;src&lt;/code&gt; argument to determine which source method to use (e.g. &lt;code&gt;getSymbols(&amp;quot;SPY&amp;quot;, src = &amp;quot;yahoo&amp;quot;)&lt;/code&gt; will call &lt;code&gt;getSymbols.yahoo(&amp;quot;SPY&amp;quot;)&lt;/code&gt; behind the scenes). This is essentially method dispatch, but done manually rather than using R&amp;rsquo;s built-in S3 functionality.&lt;/p&gt;
&lt;h1 id=&#34;what-weve-learned&#34;&gt;What we&amp;rsquo;ve learned&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;We should avoid the side-effect of creating objects in the calling environment.&lt;/li&gt;
&lt;li&gt;Data sources should use S3 method dispatch, and documentation needs to be easier to find.&lt;/li&gt;
&lt;li&gt;Stock ticker symbology is a pain and we need a better way to handle it.&lt;/li&gt;
&lt;li&gt;We need a way to provide functionality like the &lt;a href=&#34;https://cran.r-project.org/package=Defaults&#34;&gt;&amp;lsquo;Defaults&amp;rsquo;&lt;/a&gt; package did, but without side-effects.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;1-automatically-creating-objects&#34;&gt;1. Automatically creating objects&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;getSymbols()&lt;/code&gt; creates an object for every value in the &lt;code&gt;Symbols&lt;/code&gt; argument. This isn&amp;rsquo;t an issue for a few symbols, but it clutters the environment when there are several hundred symbols. You can load all the symbols into a separate environment, but that&amp;rsquo;s not a pattern most users are familiar with.&lt;/p&gt;
&lt;p&gt;We wanted to remove the ability to load objects into the calling environment, and even created a warning about changing &lt;code&gt;auto.assign = FALSE&lt;/code&gt; as the default for &lt;code&gt;getSymbols()&lt;/code&gt; and recommending users replace their &lt;code&gt;getSymbols()&lt;/code&gt; call with the &lt;code&gt;loadSymbols()&lt;/code&gt; function that already exists. But we ultimately decided breaking the community&amp;rsquo;s code wasn&amp;rsquo;t worth it.&lt;/p&gt;
&lt;p&gt;Automatically creating objects makes it cumbersome to put prices for all symbols into one object. This is a common use case and there are several steps. It should be possible with one or two function calls. Here&amp;rsquo;s an example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SPY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;AAPL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;getSymbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Put all the prices into one xts object,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# or&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Extract only the Close prices&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;close_prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Remove &amp;#34;.Close&amp;#34; suffix so close_prices[, &amp;#34;SPY&amp;#34;] works&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close_prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.Close&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close_prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Automatically creating objects also makes passing all the data to another function awkward. It causes users to do things like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Call &lt;code&gt;getSymbols()&lt;/code&gt; in any function that needs data, which may mean the same data is imported multiple times.&lt;/li&gt;
&lt;li&gt;Pass the same &lt;code&gt;symbols&lt;/code&gt; object to &lt;code&gt;getSymbols()&lt;/code&gt; and the other function. Then the other function searches through environments to find the objects with named with those &lt;code&gt;symbols&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Users could put all the data in an environment and use that as an argument to the function, but I haven&amp;rsquo;t seen many people use this pattern.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2-data-source-methods&#34;&gt;2. Data source methods&lt;/h3&gt;
&lt;p&gt;Different &lt;code&gt;getSymbols()&lt;/code&gt; source methods can (or may need to) have different arguments. Ideally the source methods wouldn&amp;rsquo;t be exported because users shouldn&amp;rsquo;t call them directly (users should call &lt;code&gt;getSymbols(&amp;quot;SPY&amp;quot;, src = &amp;quot;yahoo&amp;quot;)&lt;/code&gt; instead of &lt;code&gt;getSymbols.yahoo(&amp;quot;SPY&amp;quot;)&lt;/code&gt;). It&amp;rsquo;s hard to find documentation for unexported functions, which means it&amp;rsquo;s hard to know what arguments are available for each source method.&lt;/p&gt;
&lt;p&gt;The source methods are named like S3 methods even though &lt;code&gt;getSymbols()&lt;/code&gt; isn&amp;rsquo;t a generic function and the source methods aren&amp;rsquo;t actual S3 methods. This has the potential to create odd behavior that would confuse users.&lt;/p&gt;
&lt;h3 id=&#34;3-ticker-symbology&#34;&gt;3. Ticker symbology&lt;/h3&gt;
&lt;p&gt;There are two major issues with ticker symbols.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Exchanges and data providers sometimes use different ticker symbols for the same security.&lt;/li&gt;
&lt;li&gt;Some ticker symbols are not valid R object names.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Another issue is when the ticker symbol is similar to the name of one of the price columns. This has come up several times with Lowe&amp;rsquo;s (LOW). The &lt;code&gt;Lo()&lt;/code&gt; and &lt;code&gt;OHLC()&lt;/code&gt; functions think all of the columns with the ticker symbol in the column name are the low price for the period.&lt;/p&gt;
&lt;h4 id=&#34;same-security-different-ticker&#34;&gt;Same security, different ticker&lt;/h4&gt;
&lt;p&gt;This isn&amp;rsquo;t &lt;code&gt;getSymbols()&lt;/code&gt;&amp;rsquo;s fault and it&amp;rsquo;s out of our control, but it could be handled better. Exchange and data source symbology is awful. Identifiers for the same series are often different across exchanges and data providers. For example: the symbol for Berkshire Hathaway B-class shares is &amp;ldquo;BRK-B&amp;rdquo; for Yahoo Finance, &amp;ldquo;BRK/B&amp;rdquo; for the SIP (Securities Information Processor), &amp;ldquo;BRK B&amp;rdquo; for ICE, and probably &amp;ldquo;BRK.B&amp;rdquo; somewhere else.&lt;/p&gt;
&lt;p&gt;This is a difficult problem and will likely take a lot of effort to get right. Therefore it won&amp;rsquo;t be a high priority initially.&lt;/p&gt;
&lt;h4 id=&#34;invalid-r-object-names&#34;&gt;Invalid R object names&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;getSymbols()&lt;/code&gt; tries to create objects with valid R names, but only does so for &lt;em&gt;some&lt;/em&gt; symbols that aren&amp;rsquo;t valid R object names. For example, &lt;code&gt;BRK-B&lt;/code&gt;, &lt;code&gt;BRK B&lt;/code&gt;, and &lt;code&gt;BRK/B&lt;/code&gt; aren&amp;rsquo;t valid R objects names because valid names start with a letter or a dot (&lt;code&gt;.&lt;/code&gt;), and can only contain letters, numbers, a dot, or an underscore.&lt;/p&gt;
&lt;p&gt;Here are some common examples of ticker symbology woes:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^DJI&lt;/code&gt; isn&amp;rsquo;t a valid R object name because it starts with &lt;code&gt;^&lt;/code&gt;. So &lt;code&gt;getSymbols()&lt;/code&gt; creates an object with the &lt;code&gt;^&lt;/code&gt; removed. But then you can&amp;rsquo;t use the code below to put all the prices into one object. Also notice that &lt;code&gt;getSymbols()&lt;/code&gt; &lt;em&gt;returns&lt;/em&gt; &lt;code&gt;&amp;quot;^DJI&amp;quot;&lt;/code&gt; even though it creates an object with a different name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;^DJI&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BRK-B&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;getSymbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## [1] &amp;#34;^DJI&amp;#34; &amp;#34;BRK-B&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Error: value for &amp;#39;^DJI&amp;#39; not found&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You have to remove the leading &lt;code&gt;^&lt;/code&gt; manually. And you have to set &lt;code&gt;fixed = TRUE&lt;/code&gt; in the call to &lt;code&gt;sub()&lt;/code&gt; because &lt;code&gt;^&lt;/code&gt; is a special character in regular expressions. &lt;em&gt;Sigh&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;mget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;^&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fixed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Recall that &lt;code&gt;BRK-B&lt;/code&gt; also isn&amp;rsquo;t a valid R name because of the &lt;code&gt;-&lt;/code&gt;. But it wasn&amp;rsquo;t an issue in the code above because &lt;code&gt;getSymbols()&lt;/code&gt; made an object named &lt;code&gt;BRK-B&lt;/code&gt;, not an object with a valid R name. This is confusing for users because they can&amp;rsquo;t easily access that object (i.e. &lt;code&gt;head(BRK-B)&lt;/code&gt; is an error). This is a pervasive issue for several foreign exchanges with tickers that begin with numbers (e.g. &lt;code&gt;000001.SZ&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Another issue with symbols that aren&amp;rsquo;t valid R object names is that many R functions will convert column names into valid R object names, including &lt;code&gt;merge.xts()&lt;/code&gt;. So you can&amp;rsquo;t use the input symbol to subset the resulting xts object. Here&amp;rsquo;s an example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Extract the close prices and remove &amp;#34;.Close&amp;#34; suffix&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;close_prices&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Cl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close_prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;.Close&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close_prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Extract the close price for &amp;#34;BRK-B&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;close_prices[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BRK-B&amp;#34;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Error in `[.xts`(close_prices, , &amp;#34;BRK-B&amp;#34;) : subscript out of bounds&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;close_prices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## [1] &amp;#34;DJI&amp;#34;   &amp;#34;BRK.B&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;setSymbolLookup()&lt;/code&gt; exists to help with things like this, but it&amp;rsquo;s another function users have to learn to use and my experience is that most users don&amp;rsquo;t know about &lt;code&gt;setSymbolLookup()&lt;/code&gt;. I just had to look at the source to figure out how to use it to make &lt;code&gt;getSymbols()&lt;/code&gt; return a valid R object for &lt;code&gt;&amp;quot;BRK-B&amp;quot;&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;setSymbolLookup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BRK.B&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;BRK-B&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;yahoo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If I have to look at the source code to figure out how to do this, users don&amp;rsquo;t have a chance. You may think, &amp;ldquo;but you could document how to do this&amp;rdquo;, but writing documentation isn&amp;rsquo;t fun. And who reads the documentation anyway? ;-)&lt;/p&gt;
&lt;h3 id=&#34;4-defaults-functionality&#34;&gt;4. &amp;lsquo;Defaults&amp;rsquo; functionality&lt;/h3&gt;
&lt;p&gt;The &amp;lsquo;Defaults&amp;rsquo; functionality in quantmod comes from the archived &lt;a href=&#34;https://cran.r-project.org/package=Defaults&#34;&gt;&amp;lsquo;Defaults&amp;rsquo;&lt;/a&gt; package. This functionality allows users to set new default argument values to any &lt;code&gt;getSymbols()&lt;/code&gt; source function. This is helpful because it makes importing easier. But it means &lt;code&gt;getSymbols()&lt;/code&gt; relies on something other than its parameter values, and it&amp;rsquo;s good practice to avoid side-effects like this.&lt;/p&gt;
&lt;p&gt;This gave users the ability to set preferences like return class, periodicity (e.g. hourly, daily, monthly), connection settings (e.g. credentials, API keys).&lt;/p&gt;
&lt;h1 id=&#34;rfimport-design-and-features&#34;&gt;&amp;lsquo;rfimport&amp;rsquo; design and features&lt;/h1&gt;
&lt;p&gt;The design of &lt;a href=&#34;https://github.com/joshuaulrich/rfimport/&#34;&gt;&amp;lsquo;rfimport&amp;rsquo;&lt;/a&gt; is influenced by the &lt;a href=&#34;https://cran.r-project.org/web/packages/DBI/index.html&#34;&gt;&lt;code&gt;DBI&lt;/code&gt;&lt;/a&gt; package, which provides a set of generic &amp;lsquo;database interface&amp;rsquo; functions. Users create connection objects by creating a &amp;lsquo;driver&amp;rsquo; object for the specific database and passing that to &lt;code&gt;dbConnect()&lt;/code&gt;. Then you pass that connection object to the other &lt;code&gt;DBI&lt;/code&gt; functions. For example, to query an execute a statement for a PostgreSQL database:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RPostgreSQL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PostgreSQL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DBI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;dbConnect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;driver&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;student_count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;DBI&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;dbGetQuery&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;conn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;select count(*) from students&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;a href=&#34;https://github.com/joshuaulrich/rfimport/&#34;&gt;&amp;lsquo;rfimport&amp;rsquo;&lt;/a&gt; &lt;code&gt;sym_yahoo()&lt;/code&gt; function corresponds to the &lt;code&gt;PostgreSQL()&lt;/code&gt; function in the example above. And the &lt;code&gt;import_ohlc()&lt;/code&gt; function pulls the data like &lt;code&gt;DBI::dbGetQuery()&lt;/code&gt;. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rfimport&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# The sym_* functions are a combination of the&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# driver, connection, and query in DBI&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;sym&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sym_yahoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SPY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# Import some data from Yahoo Finance&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;spy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;import_ohlc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sym&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;symbol-specification&#34;&gt;Symbol specification&lt;/h3&gt;
&lt;p&gt;The package introduces a new virtual S3 class &lt;code&gt;&amp;quot;symbol_spec&amp;quot;&lt;/code&gt; as the basis for creating sub-classes that hold all necessary information to connect to a data source. This virtual class allows users to combine symbols from different data sources into a single vector. For example: &lt;code&gt;import_ohlc_collection(c(sym_yahoo(&amp;quot;SPY&amp;quot;), sym_tiingo(&amp;quot;DIA&amp;quot;)))&lt;/code&gt; will import data for &amp;ldquo;SPY&amp;rdquo; from &lt;a href=&#34;https://finance.yahoo.com/&#34;&gt;Yahoo Finance&lt;/a&gt; and data for &amp;ldquo;DIA&amp;rdquo; from &lt;a href=&#34;https://www.tiingo.com/&#34;&gt;Tiingo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Each data source will have its own &lt;code&gt;symbol_spec&lt;/code&gt; constructor. The constructor will have an argument for the vector of symbols and other arguments for all the other data source connection settings. It will return an object that inherits from the new virtual &lt;code&gt;symbol_spec&lt;/code&gt; For example &lt;code&gt;sym_yahoo()&lt;/code&gt; will return a &lt;code&gt;c(&amp;quot;yahoo&amp;quot;, &amp;quot;symbol_spec&amp;quot;)&lt;/code&gt; class vector.&lt;/p&gt;
&lt;p&gt;The help page for the symbol spec constructors can also document the import methods that the data source supports. So &lt;code&gt;help(&amp;quot;sym_yahoo&amp;quot;)&lt;/code&gt; would also contain information about &lt;code&gt;import_ohlc.yahoo()&lt;/code&gt; and &lt;code&gt;import_ohlc_collection.yahoo()&lt;/code&gt;. That way, users don&amp;rsquo;t need to know the name of the data source method in order to find its documentation.&lt;/p&gt;
&lt;h3 id=&#34;ticker-symbology&#34;&gt;Ticker symbology&lt;/h3&gt;
&lt;p&gt;The package would standardize how index tickers are specified. One possibility is to prefix the ticker with an &lt;code&gt;i&lt;/code&gt; or &lt;code&gt;i_&lt;/code&gt; (e.g. &lt;code&gt;iDJI&lt;/code&gt; or &lt;code&gt;i_DJI&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;It would also standardize how to specify share classes, warrants, preferred, etc. One possibility is to use an underscore to identify share classes, a lowercase &amp;lsquo;w&amp;rsquo; for warrants, and a lowercase &amp;lsquo;p&amp;rsquo; for preferred. For example, &lt;code&gt;BRK_B&lt;/code&gt; for Berkshire Hathaway B shares, &lt;code&gt;FOOw&lt;/code&gt; for warrants, &lt;code&gt;BARp&lt;/code&gt; for preferred. We could also include a translation table and/or function. This would take a lot of effort to do correctly.&lt;/p&gt;
&lt;p&gt;An easier alternative would be creating a way to map source symbols to user-defined values. It makes the most sense to do this is the &lt;code&gt;sym_&amp;lt;source&amp;gt;()&lt;/code&gt; constructor. But how should the mapping be specified? Some possibilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sym_yahoo(BRK.B = list(symbol = &amp;quot;BRK-B&amp;quot;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sym_yahoo(c(BRK.B = &amp;quot;BRK-B&amp;quot;, &amp;quot;DIA&amp;quot;))&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sym_yahoo(c(&amp;quot;BRK.B&amp;quot;, &amp;quot;DIA&amp;quot;), sym_db = list(BRK.B = &amp;quot;BRK-B&amp;quot;))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;generic-import-functions&#34;&gt;Generic import functions&lt;/h3&gt;
&lt;p&gt;The package will have generic functions &lt;code&gt;import_ohlc()&lt;/code&gt; and &lt;code&gt;import_ohlc_collection()&lt;/code&gt; to dispatch on &lt;code&gt;symbol_spec&lt;/code&gt; sub-classes. &lt;code&gt;import_ohlc()&lt;/code&gt; only handles a single symbol and returns one xts object. &lt;code&gt;import_ohlc_collection()&lt;/code&gt; will return a list of xts objects for one or more symbols.&lt;/p&gt;
&lt;p&gt;Other generic import functions may be added in the future. It may make sense to include generic &lt;code&gt;import&lt;/code&gt; functions that return specific types of data. For example: &lt;code&gt;import_statements()&lt;/code&gt; for financial statements, and &lt;code&gt;import_bbo()&lt;/code&gt; for best bid and offer.&lt;/p&gt;
&lt;p&gt;The generics will have a &lt;code&gt;symbol_spec&lt;/code&gt;, &lt;code&gt;dates&lt;/code&gt;, &lt;code&gt;periodicity&lt;/code&gt;, and &lt;code&gt;...&lt;/code&gt; arguments.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dates&lt;/code&gt; can be either an ISO 8601 date interval (e.g. &lt;code&gt;dates = &amp;quot;2021-01-01/2021-12-31&amp;quot;&lt;/code&gt;) or a two-element vector with the start and end dates (e.g. &lt;code&gt;dates = c(&amp;quot;2021-01-01&amp;quot;, &amp;quot;2021-12-31&amp;quot;)&lt;/code&gt;). The vector can be Date, POSIXct, or a character that is coercible to one of those two classes.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# one symbol returned as an xts object&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;spy&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;import_ohlc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;sym_yahoo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;SPY&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;2021/2022&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# two symbols returned as a list of xts objects&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;stocks&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;sym_tiingo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;AAPL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;NFLX&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;import_ohlc_collection&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dates&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;2021-03-01/2022-11-31&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;periodicity&lt;/code&gt; argument specifies the interval between data points (e.g. daily, monthly, 15-minute). The data source determines the possible periodicity values, so the data source method is responsible for ensuring the requested periodicity value is available from the data source. &lt;a href=&#34;https://github.com/joshuaulrich/rfimport/&#34;&gt;&amp;lsquo;rfimport&amp;rsquo;&lt;/a&gt; will provide a standard way to specify the periodicity values. Then the source methods can translate those values into the value source needs. For example, one data source may use &amp;ldquo;monthly&amp;rdquo; for monthly data and another may use &amp;ldquo;months&amp;rdquo;. Users would set &lt;code&gt;periodicity = &amp;quot;months&amp;quot;&lt;/code&gt; for either source and the source method would translate the value to &amp;ldquo;monthly&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;data-source-methods&#34;&gt;Data source methods&lt;/h3&gt;
&lt;p&gt;Each data source will have a S3 method for the relevant import generics, rather than a &lt;code&gt;src&lt;/code&gt; argument like &lt;code&gt;getSymbols()&lt;/code&gt;. Calling &lt;code&gt;import_ohlc(sym_yahoo(&amp;quot;SPY&amp;quot;))&lt;/code&gt; will call the corresponding &lt;code&gt;import_ohlc.yahoo()&lt;/code&gt; method to import data from &lt;a href=&#34;https://finance.yahoo.com&#34;&gt;Yahoo Finance&lt;/a&gt;. &lt;code&gt;import_ohlc(sym_tiingo(&amp;quot;DIA&amp;quot;))&lt;/code&gt; will call &lt;code&gt;import_ohlc.tiingo()&lt;/code&gt; to import data from &lt;a href=&#34;https://api.tiingo.com/&#34;&gt;Tiingo&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;returned-data&#34;&gt;Returned data&lt;/h4&gt;
&lt;p&gt;The built-in data source methods will automatically include dividends and splits (when available) for daily OHLCV data. They will be included as attributes on the returned OHLCV object. This will allow users to switch between adjusted and unadjusted prices without having to re-download the data.&lt;/p&gt;
&lt;p&gt;The built-in data sources methods also will not include the series symbol in the OHLCV column names like &lt;code&gt;getSymbols()&lt;/code&gt; currently does. It may make sense to include an attribute with the &amp;ldquo;source symbol&amp;rdquo; and the &amp;ldquo;R symbol&amp;rdquo; on the returned xts object (e.g. &lt;code&gt;src_symbol = &amp;quot;^DJI&amp;quot;&lt;/code&gt; and &lt;code&gt;r_symbol = &amp;quot;iDJI&amp;quot;)&lt;/code&gt;. Then that attribute can be used later as part of the column names.&lt;/p&gt;
&lt;h3 id=&#34;providing-defaults-functionality&#34;&gt;Providing &amp;lsquo;Defaults&amp;rsquo; functionality&lt;/h3&gt;
&lt;p&gt;Though we want to avoid side-effects, we probably want to provide a way to set credentials so they do not have to be provided for every import call.&lt;/p&gt;
&lt;p&gt;We could provide this functionality in a pure way by creating an &lt;code&gt;options&lt;/code&gt; object that holds a list of values. Users would create this object once and pass it to the relevant &lt;a href=&#34;https://github.com/joshuaulrich/rfimport/&#34;&gt;&amp;lsquo;rfimport&amp;rsquo;&lt;/a&gt; function (either &lt;code&gt;sym_&amp;lt;source&amp;gt;()&lt;/code&gt; or &lt;code&gt;import_ohlc()&lt;/code&gt;). The default options could be created by a function like &lt;code&gt;sym_&amp;lt;source&amp;gt;_options()&lt;/code&gt;. This would be similar to the &amp;lsquo;control&amp;rsquo; arguments to many optimization routines (e.g. &lt;code&gt;DEoptim.control()&lt;/code&gt;).&lt;/p&gt;
&lt;h1 id=&#34;open-questions-and-considerations&#34;&gt;Open questions and considerations&lt;/h1&gt;
&lt;h3 id=&#34;how-should-we-specify-the-class-of-the-returned-object&#34;&gt;How should we specify the class of the returned object?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Set it via a &lt;code&gt;return_class&lt;/code&gt; argument in the &lt;code&gt;symbol_spec&lt;/code&gt; constructor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PRO: each source is likely to have a specific data structure, and it wouldn&amp;rsquo;t require creating a generic &lt;code&gt;import&lt;/code&gt; function for each return type.&lt;/li&gt;
&lt;li&gt;CON: allows the potential for one call to an &lt;code&gt;import_*_collection()&lt;/code&gt; function to return a list of heterogeneous objects.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set it via a &lt;code&gt;return_class&lt;/code&gt; argument in the &lt;code&gt;import&lt;/code&gt; method&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PRO: the method would return a list of objects that are all the same class.&lt;/li&gt;
&lt;li&gt;CON: the generic and/or the default &lt;code&gt;import&lt;/code&gt; method would need a &lt;code&gt;return_class&lt;/code&gt; argument.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Create a new generic &lt;code&gt;import&lt;/code&gt; functions for each return class&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PRO: makes it clear what the &lt;code&gt;import&lt;/code&gt; function returns.&lt;/li&gt;
&lt;li&gt;CON: namespace clutter, don&amp;rsquo;t want generics for &lt;em&gt;every&lt;/em&gt; class. Possibly provide generics for most widely used non-xts classes: data.frame, data.table, tibble, tsibble.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The symbol specification can store a function that controls what data is returned. This doesn&amp;rsquo;t seem appealing because it adds complexity and the user could call that function after the data is returned. For example: &lt;code&gt;sym_yahoo(&amp;quot;SPY&amp;quot;, return_func = as.data.table)&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;how-can-we-make-it-easier-to-manipulate-results&#34;&gt;How can we make it easier to manipulate results?&lt;/h3&gt;
&lt;p&gt;The most common use case is making a wide xts object with close prices from a list of xts objects. This currently requires several steps that are likely unfamiliar to most users. It should be possible with one or two function calls. We can consider Garrett See&amp;rsquo;s &lt;a href=&#34;https://github.com/gsee/qmao&#34;&gt;qmao&lt;/a&gt; package for inspiration. For example, use &amp;lsquo;price frames&amp;rsquo; to replace &lt;code&gt;do.call(merge, list_of_xts_objects)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;There are lots of other common manipulations, like aggregating to a higher periodicity or applying a function to many symbols&amp;rsquo; data. The import functions will return something list-like, so users can use &lt;code&gt;lapply()&lt;/code&gt; to apply any other function to each series.&lt;/p&gt;
&lt;h1 id=&#34;i-need-your-help&#34;&gt;I need your help!&lt;/h1&gt;
&lt;p&gt;I don&amp;rsquo;t want to do this in a vacuum. Please try the new package, provide feedback, suggestions, feature requests, and help clarify documentation.&lt;/p&gt;
&lt;p&gt;I need to know how you&amp;rsquo;re using &lt;code&gt;getSymbols()&lt;/code&gt; and how you would use the new package. I&amp;rsquo;m not omniscient, so your feedback will be extremely valuable!&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g.
      &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/blotter/&#34;&gt;blotter&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/quantstrat/&#34;&gt;quantstrat&lt;/a&gt;,
      etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>quantmod_0.4.22 on CRAN</title>
      <link>https://blog.fosstrading.com/2023/04/quantmod-0-4-22-on-cran/</link>
      <pubDate>Sun, 16 Apr 2023 03:41:57 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2023/04/quantmod-0-4-22-on-cran/</guid>
      <description>&lt;p&gt;An updated version of &lt;a href=&#34;http://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt; is now on &lt;a href=&#34;http://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt;. It adds functions &lt;code&gt;HL()&lt;/code&gt;, &lt;code&gt;is.HL()&lt;/code&gt;, and &lt;code&gt;has.HL()&lt;/code&gt; to check for &amp;lsquo;high&amp;rsquo; and &amp;rsquo;low&amp;rsquo; price columns. It also makes accessing Yahoo Finance price, dividend, and split data more robust. &lt;code&gt;getSymbols.FRED()&lt;/code&gt; got &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; arguments, like other &lt;code&gt;getSymbols()&lt;/code&gt; methods. The remaining changes are bug fixes and maintenace chores.&lt;/p&gt;
&lt;p&gt;This was mainly a maintenance and bug fix release, but it does include a couple nice features. quantmod versions 0.4.17 through 0.4.21 included several relevant features that weren&amp;rsquo;t highlighted in any previous posts. They&amp;rsquo;re included in a separate section below.&lt;/p&gt;
&lt;h3 id=&#34;new-features&#34;&gt;New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Exported &lt;code&gt;HL()&lt;/code&gt;, &lt;code&gt;is.HL()&lt;/code&gt;, and &lt;code&gt;has.HL()&lt;/code&gt; functions and added documentation. These were added in 0.4.20 but not exported or included in the documentation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Switched to the Yahoo Finance v8 JSON endpoint and removed the v7 CSV endpoint. There seems to be a rate limit for the number of tickers you can request via the CSV endpoint. The &lt;a href=&#34;https://github.com/ranaroussi/yfinance&#34;&gt;yfinance python library&lt;/a&gt; uses the JSON endpoint and doesn&amp;rsquo;t seem to have rate limit issues. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/360&#34;&gt;#360&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/362&#34;&gt;#362&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/364&#34;&gt;#364&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;getSymbols.FRED()&lt;/code&gt; now supports &lt;code&gt;to&lt;/code&gt; and &lt;code&gt;from&lt;/code&gt; arguments. So users can set the &amp;lsquo;from&amp;rsquo; and &amp;rsquo;to&amp;rsquo; arguments for FRED data like they can for other data sources like Yahoo. Those values had been ignored and the entire series was always returned. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/368&#34;&gt;#368&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-fixes&#34;&gt;Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;getDividends()&lt;/code&gt; and &lt;code&gt;getSplits()&lt;/code&gt; for stocks that issue monthly dividends. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/372&#34;&gt;#372&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added error handling to &lt;code&gt;getSplits()&lt;/code&gt; and &lt;code&gt;getDividends()&lt;/code&gt;. &lt;code&gt;getDividends()&lt;/code&gt; didn&amp;rsquo;t handle cases where the download failed, or when dividends needed to be split-adjusted but there were no splits. It also tried to set colnames on the empty xts object that&amp;rsquo;s returned when there are no dividends. &lt;code&gt;getSplits()&lt;/code&gt; had the same colnames issue. Thanks to Chris Cheung for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/366&#34;&gt;#366&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Remove &amp;ldquo;^&amp;rdquo; prefix from &lt;code&gt;getSymbols()&lt;/code&gt; return value. The name of the object &lt;code&gt;getSymbols()&lt;/code&gt; created and the symbol value it returned were inconsistent when the &amp;lsquo;Symbols&amp;rsquo; argument has a &amp;ldquo;^&amp;rdquo; prefix and &lt;code&gt;auto.assign = TRUE&lt;/code&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getSymbols()&lt;/code&gt; removed the &amp;ldquo;^&amp;rdquo; from the object it creates, but&lt;/li&gt;
&lt;li&gt;returned the &amp;lsquo;Symbols&amp;rsquo; argument unchanged, and&lt;/li&gt;
&lt;li&gt;removed the &amp;ldquo;^&amp;rdquo; from the column names of the object it creates.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The example below will create an object named &lt;code&gt;IXIC&lt;/code&gt; but the value of &lt;code&gt;sym&lt;/code&gt; will be &amp;ldquo;^IXIC&amp;rdquo;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  sym &amp;lt;- getSymbols(&amp;quot;^IXIC&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That means &lt;code&gt;x &amp;lt;- get(sym)&lt;/code&gt; will not work because an object named &lt;code&gt;^IXIC&lt;/code&gt; doesn&amp;rsquo;t exist. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/371&#34;&gt;#371&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;chores&#34;&gt;Chores&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Moved &lt;a href=&#34;http://cran.r-project.org/package=jsonlite&#34;&gt;jsonlite&lt;/a&gt; from Suggests to Imports so it doesn&amp;rsquo;t cause a problem when a package that doesn&amp;rsquo;t also Suggest jsonlite but uses &lt;code&gt;getSymbols()&lt;/code&gt;. Thanks to Kurt Hornik for the report and fix! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/380&#34;&gt;#380&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed S3 method issues. R-devel (83995-ish) added a check that found methods that were not registered (&lt;code&gt;str.replot()&lt;/code&gt;, &lt;code&gt;seriesHi.timeSeries()&lt;/code&gt;, and &lt;code&gt;seriesLo.timeSeries()&lt;/code&gt;). It was also confused by &lt;code&gt;range.bars()&lt;/code&gt; and &lt;code&gt;unique.formula.names()&lt;/code&gt; because they are named like S3 methods. Neither were exported so they didn&amp;rsquo;t affect users. Thanks to Kurt Hornik for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/375&#34;&gt;#375&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&#34;changes-in-prior-versions&#34;&gt;Changes in Prior Versions&lt;/h1&gt;
&lt;h3 id=&#34;new-features-1&#34;&gt;New Features&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Added &lt;code&gt;HL()&lt;/code&gt; and supporting functions. These are analogues to &lt;code&gt;HLC()&lt;/code&gt;, &lt;code&gt;OHLC()&lt;/code&gt;, etc. Thanks for Karl Gauvin for the nudge to implement them.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added adjusted close price to &lt;code&gt;getSymbols.tiingo()&lt;/code&gt; output. Thanks to Ethan Smith for the suggestion and patch! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/289&#34;&gt;#289&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/pull/345&#34;&gt;#345&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated &lt;code&gt;getSymbols.tiingo()&lt;/code&gt; to use a Date index for daily data. Thanks to Ethan Smith for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/350&#34;&gt;#350&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated &lt;code&gt;getOptionChain()&lt;/code&gt; to return all the fields that Yahoo Finance provides. Thanks to Adam Childers (@rhizomatican) for the patch! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/318&#34;&gt;#318&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/pull/336&#34;&gt;#336&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added &lt;a href=&#34;https://docs.orats.io&#34;&gt;orats&lt;/a&gt; as a source for &lt;code&gt;getOptionChain()&lt;/code&gt;. Thanks to Steve Bronder (@SteveBronder) for the suggestion and implementation! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/pull/325&#34;&gt;#325&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added &amp;ldquo;Defaults&amp;rdquo; handling to &lt;code&gt;getQuote()&lt;/code&gt; and &lt;code&gt;getQuote.yahoo()&lt;/code&gt;. Thanks to Ethan Smith for the report. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/291&#34;&gt;#291&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added Bid and Ask fields to the output from &lt;code&gt;getQuote()&lt;/code&gt;. Thanks to @jrburl for the report and PR. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/pull/302&#34;&gt;#302&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;bug-fixes-1&#34;&gt;Bug Fixes&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Removed check for Yahoo Finance cookies because the site no longer responds with a cookie, and that caused the connection attempt to fail. This affected &lt;code&gt;getSymbols()&lt;/code&gt;, &lt;code&gt;getDividends()&lt;/code&gt;, and &lt;code&gt;getSplits()&lt;/code&gt;. Thanks to several users for reporting, and especially to @pverspeelt and @alihru for investigating potential fixes! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/358&#34;&gt;#358&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Updated &lt;code&gt;getSymbols.yahooj()&lt;/code&gt; for changes to the web page. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/312&#34;&gt;#312&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removed unneeded arguments to the &lt;code&gt;getSymbols.tiingo()&lt;/code&gt; implementation. Thanks to Ethan Smith for the suggestion and patch! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/343&#34;&gt;#343&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/pull/344&#34;&gt;#344&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Load dividends and splits data into the correct environment when the user provides a value for the &lt;code&gt;env&lt;/code&gt; argument. The previous behavior always loaded the data into the environment the function was called from. Thanks to Stewart Wright for the report and patch! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/33&#34;&gt;#33&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Improved the error message when &lt;code&gt;getSymbols()&lt;/code&gt; cannot import data for a symbol because the symbol is not valid or does not have historical data. Thanks to Peter Carl for the report. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/333&#34;&gt;#333&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed the &lt;code&gt;getMetals()&lt;/code&gt; example in the documentation. The example section previously had an example of &lt;code&gt;getFX()&lt;/code&gt;. Thanks to Gerhard Nachtmann (@nachti) for the report and patch! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/330&#34;&gt;#330&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;getQuote()&lt;/code&gt; so it returns data when the ticker symbol contains an &amp;ldquo;&amp;amp;&amp;rdquo;. Thanks to @pankaj3009 for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/324&#34;&gt;#324&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;addMACD()&lt;/code&gt; when &lt;code&gt;col&lt;/code&gt; is specified. Thanks to @nvalueanalytics for the report! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/321&#34;&gt;#321&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed issues handling https:// in &lt;code&gt;getSymbols.yahooj()&lt;/code&gt;. Thanks to @lobo1981 and @tchevri for the reports and Ethan Smith for the suggestion to move from XML to xml2. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/310&#34;&gt;#310&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/312&#34;&gt;#312&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;getSymbols.yahoo()&lt;/code&gt;, &lt;code&gt;getDividends()&lt;/code&gt;, and &lt;code&gt;getSplits()&lt;/code&gt; so they all handle download errors and retry again. Thanks for @helgasoft for the report on &lt;code&gt;getSymbols.yahoo()&lt;/code&gt; and @msfsalla for the report on &lt;code&gt;getDividends()&lt;/code&gt; and &lt;code&gt;getSplits()&lt;/code&gt;. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/307&#34;&gt;#307&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/314&#34;&gt;#314&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Added implied volatility and last trade date to &lt;code&gt;getOptionChain()&lt;/code&gt; output. Thanks to @hd2581 and @romanlelek for the reports. And thanks to @rjvelasquezm for noticing the error when &lt;code&gt;lastTradeDate&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/224&#34;&gt;#224&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/304&#34;&gt;#304&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &lt;code&gt;getOptionChain()&lt;/code&gt; to throw a warning and return &lt;code&gt;NULL&lt;/code&gt; for every expiry that doesn&amp;rsquo;t have data. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/299&#34;&gt;#299&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Fixed &amp;ldquo;Defaults&amp;rdquo; to handle unexported function (e.g. &lt;code&gt;getQuote.av()&lt;/code&gt;. Thanks to @helgasoft for the report. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/316&#34;&gt;#316&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;importDefaults()&lt;/code&gt; didn&amp;rsquo;t call &lt;code&gt;get()&lt;/code&gt; on vector with length &amp;gt; 1. Thanks to Kurt Hornik for the report. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/319&#34;&gt;#319&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;chartTheme()&lt;/code&gt; now works when quantmod is not attached. Thanks to Kurt Hornik for the report.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g. &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;, etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;

    &lt;p&gt;I look forward to your questions and feedback! If you have a question, please ask on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; and use the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;[r]&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/tagged/quantmod&#34;&gt;[quantmod]&lt;/a&gt; tags.  Or you can send an email to the &lt;a href=&#34;https://stat.ethz.ch/mailman/listinfo/r-sig-finance&#34;&gt;R-SIG-Finance&lt;/a&gt; mailing list (you must subscribe to post). Open an &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues&#34;&gt;issue on GitHub&lt;/a&gt; if you find a bug or want to request a feature. Please &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/blob/master/.github/CONTRIBUTING.md&#34;&gt;read the contributing guide&lt;/a&gt; first! It will help save time for both of us. ;-)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>quantmod_0.4-16 on CRAN</title>
      <link>https://blog.fosstrading.com/2020/03/quantmod-0-4-16-on-cran/</link>
      <pubDate>Tue, 10 Mar 2020 07:23:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2020/03/quantmod-0-4-16-on-cran/</guid>
      <description>&lt;p&gt;A new version of &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt; is on &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;CRAN&lt;/a&gt;! One really cool thing about this release is that almost all the changes are contributions from the community.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/ethanbsmith&#34;&gt;Ethan Smith&lt;/a&gt; made more excellent contributions to &lt;code&gt;getQuote()&lt;/code&gt; in this release. It no longer throws an error if one or more symbols are missing.  And it handles multiple symbols in a semicolon-delimted string, just like &lt;code&gt;getSymbols()&lt;/code&gt;. For example, you can get quotes for multiple symbols by calling &lt;code&gt;getQuote(&amp;quot;SPY;AAPL&amp;quot;)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jrburl&#34;&gt;@jrburl&lt;/a&gt; made a great enhancement to &lt;code&gt;getOptionChain()&lt;/code&gt;. Now, instead of throwing an error, it sets volume and open interest to &lt;code&gt;NA&lt;/code&gt; if those columns are missing from the Yahoo Finance data. They also submitted a pull request to handle cases where Bid and/or Ask data are missing too. Unfortunately, that pull request came after I had already pushed to CRAN.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;a href=&#34;https://finance.yahoo.com/&#34;&gt;Yahoo! Finance&lt;/a&gt; continues to make changes to how they return data. Thankfully, quantmod users are diligent and catch these changes. &lt;a href=&#34;https://github.com/helgasoft/&#34;&gt;@helgasoft&lt;/a&gt; noticed the split ratio delimiter changed from &lt;code&gt;/&lt;/code&gt; to &lt;code&gt;:&lt;/code&gt;. So, for example, a 2-for-1 split was &lt;code&gt;1/2&lt;/code&gt; but is now &lt;code&gt;2:1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/helgasoft/&#34;&gt;@helgasoft&lt;/a&gt; also noticed that &lt;a href=&#34;https://www.alphavantage.co/&#34;&gt;Alpha Vantage&lt;/a&gt; discontinued their &amp;ldquo;batch quote&amp;rdquo; functionality, which broke &lt;code&gt;getQuote()&lt;/code&gt;. Thankfully, they provided a patch that used the single-quote request, so &lt;code&gt;getQuote()&lt;/code&gt; works with Alpha Vantage again!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/matiasandina&#34;&gt;@matiasandina&lt;/a&gt; noticed that I had incorrectly labelled the dividend pay date as the ex-dividend date in the data &lt;code&gt;getQuote()&lt;/code&gt; returned from Yahoo Finance. Whoops!&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://cran.r-project.org/web/packages/quantmod/news/news.html&#34;&gt;news&lt;/a&gt; file for the other bug fixes. Thanks for using quantmod!&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g. &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;, etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;

    &lt;p&gt;I look forward to your questions and feedback! If you have a question, please ask on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; and use the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;[r]&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/tagged/quantmod&#34;&gt;[quantmod]&lt;/a&gt; tags.  Or you can send an email to the &lt;a href=&#34;https://stat.ethz.ch/mailman/listinfo/r-sig-finance&#34;&gt;R-SIG-Finance&lt;/a&gt; mailing list (you must subscribe to post). Open an &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues&#34;&gt;issue on GitHub&lt;/a&gt; if you find a bug or want to request a feature. Please &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/blob/master/.github/CONTRIBUTING.md&#34;&gt;read the contributing guide&lt;/a&gt; first! It will help save time for both of us. ;-)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>quantmod_0.4-14 on CRAN</title>
      <link>https://blog.fosstrading.com/2019/03/quantmod-0-4-14-on-cran/</link>
      <pubDate>Mon, 25 Mar 2019 06:53:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2019/03/quantmod-0-4-14-on-cran/</guid>
      <description>&lt;p&gt;I just pushed a new release of &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt; to &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;CRAN&lt;/a&gt;! &lt;code&gt;getSymbols()&lt;/code&gt; no longer stops if there&amp;rsquo;s a problem with a ticker symbol. And &lt;code&gt;getQuote()&lt;/code&gt; can now import quotes from &lt;a href=&#34;https://www.tiingo.com/&#34;&gt;Tiingo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m most excited about the update to &lt;code&gt;getSymbols()&lt;/code&gt; so it doesn&amp;rsquo;t throw an error and stop processing if there&amp;rsquo;s a problem with one ticker symbol. Now &lt;code&gt;getSymbols()&lt;/code&gt; will import all the data it can, and provide an informative error message for any ticker symbols it could not import.&lt;/p&gt;
&lt;p&gt;At a close second, I&amp;rsquo;m also excited about being able to import quotes from &lt;a href=&#34;https://www.tiingo.com/&#34;&gt;Tiingo&lt;/a&gt; using &lt;code&gt;getQuote()&lt;/code&gt;!. But don&amp;rsquo;t thank me; thank &lt;a href=&#34;https://github.com/ethanbsmith&#34;&gt;Ethan Smith&lt;/a&gt; for the feature request [&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/247&#34;&gt;#247&lt;/a&gt;] and pull request [&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/pull/250&#34;&gt;#250&lt;/a&gt;].&lt;/p&gt;
&lt;p&gt;There are also several bug fixes in this release.  The most noticeable are fixes to &lt;code&gt;getDividends()&lt;/code&gt;  and &lt;code&gt;getSplits()&lt;/code&gt;. &lt;a href=&#34;https://finance.yahoo.com/&#34;&gt;Yahoo! Finance&lt;/a&gt; continues to have stability issues. Now it returns raw dividends instead of split-adjusted dividends (thanks to Douglas Barnard for the report [&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/253&#34;&gt;#253&lt;/a&gt;]), and the actual split adjustment ratio instead of the inverse (e.g. now 1/2 instead of 2/1).  I suggest using a different data provider. See my post: &lt;a href=&#34;http://blog.fosstrading.com/2017/06/yahoo-finance-alternatives.html&#34;&gt;Yahoo! Finance Alternatives&lt;/a&gt; for some suggestions.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://cran.r-project.org/web/packages/quantmod/news/news.html&#34;&gt;news&lt;/a&gt; file for the other bug fixes. Please let me know what you think about these changes.  I need your feedback and input to make quantmod even better!&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g. &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;, etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;

    &lt;p&gt;I look forward to your questions and feedback! If you have a question, please ask on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; and use the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;[r]&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/tagged/quantmod&#34;&gt;[quantmod]&lt;/a&gt; tags.  Or you can send an email to the &lt;a href=&#34;https://stat.ethz.ch/mailman/listinfo/r-sig-finance&#34;&gt;R-SIG-Finance&lt;/a&gt; mailing list (you must subscribe to post). Open an &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues&#34;&gt;issue on GitHub&lt;/a&gt; if you find a bug or want to request a feature. Please &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/blob/master/.github/CONTRIBUTING.md&#34;&gt;read the contributing guide&lt;/a&gt; first! It will help save time for both of us. ;-)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Goodbye Google, Hello Tiingo!</title>
      <link>https://blog.fosstrading.com/2018/04/goodbye-google-hello-tiingo/</link>
      <pubDate>Fri, 13 Apr 2018 11:14:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2018/04/goodbye-google-hello-tiingo/</guid>
      <description>&lt;p&gt;First, the bad news:&lt;/p&gt;
&lt;p&gt;Google Finance no longer provides data for historical prices or financial statements, so we say goodbye to &lt;code&gt;getSymbols.google()&lt;/code&gt; and &lt;code&gt;getFinancials.google()&lt;/code&gt;. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/221&#34;&gt;#221&lt;/a&gt;)  They are now defunct as of quantmod 0.4-13.&lt;/p&gt;
&lt;p&gt;Now, the good news:&lt;/p&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/SteveBronder&#34;&gt;Steve Bronder&lt;/a&gt;, &lt;code&gt;getSymbols()&lt;/code&gt; can now import data from &lt;a href=&#34;https://www.tiingo.com/&#34;&gt;Tiingo&lt;/a&gt;! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/220&#34;&gt;#220&lt;/a&gt;)  This feature is part of quantmod 0.4-13, which is &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;now on CRAN&lt;/a&gt;.  Windows and Mac binaries should be built in a day or two.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.tiingo.com/&#34;&gt;Tiingo&lt;/a&gt; is a web service that provides tools and data for financial analysis.  They provide daily price history for US stocks and ADRs, Chinese stocks, Mutual Funds, and ETFs.  There is up to 30+ years of history, including raw prices and split/dividend adjusted prices.&lt;/p&gt;
&lt;p&gt;All this data is accessible for free, with reasonable symbol and bandwidth limits.  All you need to get started is a one-time registration for an API token.  You should see your API token just above the beginning of the &lt;a href=&#34;https://api.tiingo.com/docs/tiingo/daily#metaData&#34;&gt;metadata section&lt;/a&gt;, after logging in, of course.  Tiingo has a well-documented &lt;a href=&#34;https://api.tiingo.com/docs/tiingo/daily&#34;&gt;daily price data API&lt;/a&gt; that returns either JSON or CSV.&lt;/p&gt;
&lt;p&gt;To get started, install the latest &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod from CRAN&lt;/a&gt;.  Then you call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;getSymbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MSFT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;tiingo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;api.key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\[your key\]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;   
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where you replace &lt;code&gt;&amp;quot;\[your key\]&amp;quot;&lt;/code&gt; with the API key you receive after registration.  You can use &lt;code&gt;setDefaults()&lt;/code&gt; to set your API key one time, and use it for all &lt;code&gt;getSymbols.tiingo()&lt;/code&gt; calls.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;setDefaults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;getSymbols.tiingo&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;api.key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\[your key\]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Other notable changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;There is now a &lt;code&gt;getQuote.alphavantage()&lt;/code&gt; that allows you to pull real-time quotes from Alpha Vantage.  Thanks to &lt;a href=&#34;https://github.com/ethanbsmith&#34;&gt;Ethan Smith&lt;/a&gt;! (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/213&#34;&gt;#213&lt;/a&gt;, &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/223&#34;&gt;#223&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Speaking of &lt;a href=&#34;https://www.alphavantage.co/&#34;&gt;Alpha Vantage&lt;/a&gt;, getSymbols.av() can now pull weekly and monthly adjusted prices. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/212&#34;&gt;#212&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The URL in &lt;code&gt;getSymbols.oanda()&lt;/code&gt; and &lt;code&gt;getFX()&lt;/code&gt; has been updated, so they work again. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/225&#34;&gt;#225&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getQuote.yahoo()&lt;/code&gt; no longer errors when a field has no data for all requested tickers. (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/208&#34;&gt;#208&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;saveChart()&lt;/code&gt; actually saves charts now (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/154&#34;&gt;#154&lt;/a&gt;). Brilliant!&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>getSymbols and Alpha Vantage</title>
      <link>https://blog.fosstrading.com/2017/10/getsymbols-and-alpha-vantage/</link>
      <pubDate>Fri, 06 Oct 2017 16:12:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2017/10/getsymbols-and-alpha-vantage/</guid>
      <description>&lt;p&gt;Thanks to &lt;a href=&#34;http://quantdevel.com/public/&#34;&gt;Paul Teetor&lt;/a&gt;, &lt;code&gt;getSymbols()&lt;/code&gt; can now import data from &lt;a href=&#34;https://www.alphavantage.co/&#34;&gt;Alpha Vantage&lt;/a&gt;!  This feature is part of the &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt; 0.4-11 release, and provides another &lt;a href=&#34;http://blog.fosstrading.com/2017/06/yahoo-finance-alternatives.html&#34;&gt;another data source&lt;/a&gt; to avoid any &lt;a href=&#34;http://blog.fosstrading.com/2017/06/quantmod-0-4-9-on-cran.html&#34;&gt;Yahoo Finance API changes&lt;/a&gt;*.&lt;/p&gt;
&lt;p&gt;Alpha Vantage is a free web service that provides real-time and historical equity data.  They provide daily, weekly, and monthly history for both domestic and international markets, with up to 20 years of history. Dividend and split adjusted close prices are available for daily data. They also provide near real-time price bars at a resolution of 1 minute or more, for up to 10 recent days.&lt;/p&gt;
&lt;p&gt;All you need to get started is a &lt;a href=&#34;https://www.alphavantage.co/support/#api-key&#34;&gt;one-time registration for an API key&lt;/a&gt;.  Alpha Vantage has &lt;a href=&#34;https://www.alphavantage.co/documentation/&#34;&gt;clean, documented, public API&lt;/a&gt; that returns either JSON-encoded data or a CSV file.  The arguments to &lt;code&gt;getSymbols.av()&lt;/code&gt; closely follow the native API, so be sure to use their documentation!&lt;/p&gt;
&lt;p&gt;To get started, install the latest &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod from CRAN&lt;/a&gt;.  Then you call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;getSymbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;MSFT&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;src&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;av&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;api.key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\[your key\]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Where you replace &lt;code&gt;&amp;quot;\[your key&amp;quot;\]&lt;/code&gt; with the API key you receive after registration.  You can use &lt;code&gt;setDefaults()&lt;/code&gt; to set your API key one time, and use it for all &lt;code&gt;getSymbols.av()&lt;/code&gt; calls.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;setDefaults&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;getSymbols.av&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;api.key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\[your key\]&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;* Speaking of API changes, this release also includes a fix for a Yahoo Finance change (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/174&#34;&gt;#174&lt;/a&gt;).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Importing and managing financial data</title>
      <link>https://blog.fosstrading.com/2017/06/importing-and-managing-financial-data2/</link>
      <pubDate>Wed, 21 Jun 2017 07:07:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2017/06/importing-and-managing-financial-data2/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m excited to announce my &lt;a href=&#34;https://www.datacamp.com&#34;&gt;DataCamp&lt;/a&gt; course on &lt;a href=&#34;https://www.datacamp.com/courses/importing-and-managing-financial-data-in-r&#34;&gt;importing and managing financial data in R&lt;/a&gt;! I&amp;rsquo;m also honored that it is included in DataCamp&amp;rsquo;s &lt;a href=&#34;https://www.datacamp.com/tracks/quantitative-analyst-with-r&#34;&gt;Quantitative Analyst with R Career Track&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;You can explore the first chapter for free, so be sure to check it out!&lt;/p&gt;
&lt;h3 id=&#34;course-description&#34;&gt;Course Description&lt;/h3&gt;
&lt;p&gt;Financial and economic time series data come in various shapes, sizes, and periodicities. Getting the data into R can be stressful and time-consuming, especially when you need to merge data from several different sources into one data set. This course covers importing data from local files as well as from internet sources.&lt;/p&gt;
&lt;h3 id=&#34;course-outline&#34;&gt;Course Outline&lt;/h3&gt;
&lt;h5 id=&#34;chapter-1-introduction-and-downloading-data&#34;&gt;Chapter 1: Introduction and downloading data&lt;/h5&gt;
&lt;p&gt;A wealth of financial and economic data are available online. Learn how &lt;code&gt;getSymbols()&lt;/code&gt; and &lt;code&gt;Quandl()&lt;/code&gt; make it easy to access data from a variety of sources.&lt;/p&gt;
&lt;h5 id=&#34;chapter-2-extracting-and-transforming-data&#34;&gt;Chapter 2: Extracting and transforming data&lt;/h5&gt;
&lt;p&gt;You&amp;rsquo;ve learned how to import data from online sources, now it&amp;rsquo;s time to see how to extract columns from the imported data. After you&amp;rsquo;ve learned how to extract columns from a single object, you will explore how to import, transform, and extract data from multiple instruments.&lt;/p&gt;
&lt;h5 id=&#34;chapter-3-managing-data-from-multiple-sources&#34;&gt;Chapter 3: Managing data from multiple sources&lt;/h5&gt;
&lt;p&gt;Learn how to simplify and streamline your workflow by taking advantage of the ability to customize default arguments to &lt;code&gt;getSymbols()&lt;/code&gt;. You will see how to customize defaults by data source, and then how to customize defaults by symbol. You will also learn how to handle problematic instrument symbols&lt;/p&gt;
&lt;h6 id=&#34;chapter-4-aligning-data-with-different-periodicities&#34;&gt;Chapter 4: Aligning data with different periodicities&lt;/h6&gt;
&lt;p&gt;You&amp;rsquo;ve learned how to import, extract, and transform data from multiple data sources. You often have to manipulate data from different sources in order to combine them into a single data set. First, you will learn how to convert sparse, irregular data into a regular series. Then you will review how to aggregate dense data to a lower frequency. Finally, you will learn how to handle issues with intra-day data.&lt;/p&gt;
&lt;h5 id=&#34;chapter-5-importing-text-data-and-adjusting-for-corporate-actions&#34;&gt;Chapter 5: Importing text data, and adjusting for corporate actions&lt;/h5&gt;
&lt;p&gt;You&amp;rsquo;ve learned the core workflow of importing and manipulating financial data. Now you will see how to import data from text files of various formats. Then you will learn how to check data for weirdness and handle missing values. Finally, you will learn how to adjust stock prices for splits and dividends.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>quantmod 0.4-9 on CRAN</title>
      <link>https://blog.fosstrading.com/2017/06/quantmod-0-4-9-on-cran/</link>
      <pubDate>Wed, 07 Jun 2017 12:25:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2017/06/quantmod-0-4-9-on-cran/</guid>
      <description>&lt;p&gt;A new release of &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt; is now on &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;CRAN&lt;/a&gt;! The only change was to address changes to &lt;a href=&#34;https://finance.yahoo.com/&#34;&gt;Yahoo! Finance&lt;/a&gt; and their effects on &lt;code&gt;getSymbols.yahoo()&lt;/code&gt;.  GitHub issue &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/157&#34;&gt;#157&lt;/a&gt; contains some details about the fix implementation.&lt;/p&gt;
&lt;p&gt;Unfortunately, the URL wasn&amp;rsquo;t the only thing that changed.  The actual data available for download changed as well.&lt;/p&gt;
&lt;p&gt;The most noticeable difference is that the adjusted close column is no longer dividend-adjusted (i.e. it&amp;rsquo;s only split-adjusted).  Also, only the close price is unadjusted; the open, high, and low are split-adjusted.&lt;/p&gt;
&lt;p&gt;There also appear to be issues with the adjusted prices in some instruments.  For example, users reported issues with split data for XLF and SPXL in GitHub issue &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/160&#34;&gt;#160&lt;/a&gt;.  For XLF, there a split &lt;em&gt;and&lt;/em&gt; a dividend on 2016-09-16, even on the &lt;a href=&#34;https://finance.yahoo.com/quote/XLF/history?period1=1473138000&amp;amp;period2=1474866000&amp;amp;interval=1d&amp;amp;filter=history&amp;amp;frequency=1d&#34;&gt;Yahoo! Finance historical price page for XLF&lt;/a&gt;. As far as I can tell, there was only a special dividend.  The problem with SPXL is that the adjusted close price isn&amp;rsquo;t adjusted for the 4/1 split on 2017-05-01, which is also reflected on the &lt;a href=&#34;https://finance.yahoo.com/quote/SPXL/history?period1=1488088800&amp;amp;period2=1495774800&amp;amp;interval=1d&amp;amp;filter=history&amp;amp;frequency=1d&#34;&gt;Yahoo! Finance historical prices page for SPXL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another change is that the downloaded data may contain rows where all the values are &amp;ldquo;null&amp;rdquo;.  These appear on the website as &amp;ldquo;0&amp;rdquo;.  This is a major issue for some instruments.  Take XLU for example; 188 of the 624 days of data are missing between 2014-12-04 and 2017-05-26 (ouch!).  You can see this is even true on the &lt;a href=&#34;https://finance.yahoo.com/quote/XLU/history?period1=1417672800&amp;amp;period2=1422079200&amp;amp;interval=1d&amp;amp;filter=history&amp;amp;frequency=1d&#34;&gt;Yahoo! Finance historical price page for XLU&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If these changes have made you look for a new data provider, see my post: &lt;a href=&#34;http://blog.fosstrading.com/2017/06/yahoo-finance-alternatives.html&#34;&gt;Yahoo! Finance Alternatives&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g. &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;, etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;

    &lt;p&gt;I look forward to your questions and feedback! If you have a question, please ask on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; and use the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;[r]&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/tagged/quantmod&#34;&gt;[quantmod]&lt;/a&gt; tags.  Or you can send an email to the &lt;a href=&#34;https://stat.ethz.ch/mailman/listinfo/r-sig-finance&#34;&gt;R-SIG-Finance&lt;/a&gt; mailing list (you must subscribe to post). Open an &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues&#34;&gt;issue on GitHub&lt;/a&gt; if you find a bug or want to request a feature. Please &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/blob/master/.github/CONTRIBUTING.md&#34;&gt;read the contributing guide&lt;/a&gt; first! It will help save time for both of us. ;-)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>quantmod 0.4-8 on CRAN</title>
      <link>https://blog.fosstrading.com/2017/04/quantmod-0-4-8-on-cran/</link>
      <pubDate>Wed, 19 Apr 2017 10:45:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2017/04/quantmod-0-4-8-on-cran/</guid>
      <description>&lt;p&gt;I pushed a bug-fix release of &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt; to &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt; last night. The major changes were to&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;getSymbols.FRED()&lt;/code&gt; (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/141&#34;&gt;#141&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSymbols.oanda()&lt;/code&gt; (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/144&#34;&gt;#144&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getSymbols.yahoo()&lt;/code&gt; (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/149&#34;&gt;#149&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All three providers made breaking changes to their URLs/interfaces.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;getSymbols.google()&lt;/code&gt; also got some love. It now honors all arguments set via &lt;code&gt;setSymbolLookup()&lt;/code&gt; (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/138&#34;&gt;#138&lt;/a&gt;), and it correctly parses the date column in non-English locales (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/140&#34;&gt;#140&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s a handy new argument to &lt;code&gt;getDividends()&lt;/code&gt;: &lt;code&gt;split.adjust&lt;/code&gt;. It allows you to request dividends unadjusted for splits (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/140&#34;&gt;#128&lt;/a&gt;). Yahoo provides split-adjusted dividends, so you previously had to manually unadjust them for splits if you wanted the original raw values. To import the raw unadjusted dividends, just call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;rawDiv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getDividends&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;IBM&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;split.adjust&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that the default is &lt;code&gt;split.adjust = TRUE&lt;/code&gt; to maintain backward-compatibility.&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g. &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;, etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;

    &lt;p&gt;I look forward to your questions and feedback! If you have a question, please ask on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; and use the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;[r]&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/tagged/quantmod&#34;&gt;[quantmod]&lt;/a&gt; tags.  Or you can send an email to the &lt;a href=&#34;https://stat.ethz.ch/mailman/listinfo/r-sig-finance&#34;&gt;R-SIG-Finance&lt;/a&gt; mailing list (you must subscribe to post). Open an &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues&#34;&gt;issue on GitHub&lt;/a&gt; if you find a bug or want to request a feature. Please &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/blob/master/.github/CONTRIBUTING.md&#34;&gt;read the contributing guide&lt;/a&gt; first! It will help save time for both of us. ;-)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>Stack Financials: Analyze Financial Statement Data</title>
      <link>https://blog.fosstrading.com/2017/02/stack-financials/</link>
      <pubDate>Tue, 14 Feb 2017 10:49:00 -0600</pubDate>
      
      <guid>https://blog.fosstrading.com/2017/02/stack-financials/</guid>
      <description>&lt;p&gt;A &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt; user asked an interesting question on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;StackOverflow&lt;/a&gt;: &lt;a href=&#34;http://stackoverflow.com/q/42047746/271616&#34;&gt;Looping viewFinancials from quantmod&lt;/a&gt;. Basically, they wanted to create a &lt;code&gt;data.frame&lt;/code&gt; that contained financial statement data for several companies for several years. I answered their question, and thought others might find the function I wrote useful&amp;hellip; hence, this post!&lt;/p&gt;
&lt;p&gt;I called the function &lt;code&gt;stackFinancials()&lt;/code&gt; because it would use &lt;code&gt;getFinancials()&lt;/code&gt; and &lt;code&gt;viewFinancials()&lt;/code&gt; to pull financial statement data for multiple symbols, and stack them together in long form. I chose a long data format because I don’t know whether the output of &lt;code&gt;viewFinancials()&lt;/code&gt; always has the same number of rows and columns for a given &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt;. The long format makes it easy to put all the data in one object.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;stackFinancials&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;IS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;CF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Ensure the type and period arguments match viewFinancials  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;match.arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;toupper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type[1]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;BS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;IS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;CF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;match.arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;toupper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;period[1]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;A&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Simple function to get financials for one symbol  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;getOne&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;gf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getFinancials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;auto.assign&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;vf&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;viewFinancials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Put viewFinancials output into a data.frame  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;df&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;data.frame&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line.item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;rownames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                     &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symbol&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;symbol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                     &lt;span class=&#34;n&#34;&gt;stringsAsFactors&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;check.names&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;FALSE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Reshape data.frame into long format  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;reshape&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;df&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;direction&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;long&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;varying&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;seq&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;ncol&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)),&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;v.names&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;idvar&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;line.item&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                    &lt;span class=&#34;n&#34;&gt;times&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;vf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Reset row.names to &amp;#34;automatic&amp;#34;  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;rownames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;NULL&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Return data  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;long&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Loop over all symbols  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;allData&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# rbind() all into one data.frame  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;rbind&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;allData&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here’s a simple example of how to use &lt;code&gt;stackFinancials()&lt;/code&gt; to pull the quarterly (&lt;code&gt;period = &amp;quot;Q&amp;quot;&lt;/code&gt;) income statements (&lt;code&gt;type = &amp;quot;IS&amp;quot;&lt;/code&gt;) for General Electric and Apple:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;library&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quantmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;stackFinancials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;GE&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;AAPL&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;IS&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;period&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Q&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;##                line.item type period symbol       time value  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 1                Revenue   IS      Q     GE 2016-12-31 33088  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 2   Other Revenue, Total   IS      Q     GE 2016-12-31    NA  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 3          Total Revenue   IS      Q     GE 2016-12-31 33088  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## 4 Cost of Revenue, Total   IS      Q     GE 2016-12-31 24775&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now that we have the output in &lt;code&gt;Data&lt;/code&gt;, let’s do something with it. You could simply subset &lt;code&gt;Data&lt;/code&gt; to extract the components you want. For example, if you wanted to look at Apple’s quarterly revenue, you could subset &lt;code&gt;Data&lt;/code&gt; where &lt;code&gt;symbol == &amp;quot;AAPL&amp;quot;&lt;/code&gt; and &lt;code&gt;line.item == &amp;quot;Total Revenue&amp;quot;&lt;/code&gt;. But if you’re going to slicing-and-dicing a lot, it can often help to write a general function to simplify things. So I wrote &lt;code&gt;extractLineItem()&lt;/code&gt;. It takes the output of &lt;code&gt;stackFinancials()&lt;/code&gt; and a regular expression of the line item you want, and it returns an xts object that contains the given line items for all symbols in the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;extractLineItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stackedFinancials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;line.item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;if &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;missing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stackedFinancials&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;missing&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line.item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;You must provide output from stackFinancials(),&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;         &lt;span class=&#34;s&#34;&gt;&amp;#34;and the line.item to extract&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Select line items matching user input  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;match.rows&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;grepl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line.item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line.item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ignore.case&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;TRUE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;sfSubset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data[match.rows&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;getItem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Create xts object  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;xts&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;as.yearmon&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Ensure column names are syntactically valid  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;valid.names&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;make.names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;paste&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbol[1]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;line.item[1]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;# Remove repeating periods  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;colnames&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;gsub&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;\\.+&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;\\.&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;valid.names&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Split subset by line.item and symbol  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;symbol.item&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;sfSubset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sfSubset[&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;symbol&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;line.item&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;c1&#34;&gt;# Apply getItem() to each chunk, and merge into one object  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;do.call&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;merge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;lapply&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;symbol.item&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Let’s use &lt;code&gt;extractLineItem()&lt;/code&gt; to compare total revenue for GE and AAPL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;totalRevenue&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;extractLineItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;total revenue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;totalRevenue&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;##          AAPL.Total.Revenue GE.Total.Revenue  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Dec 2015              75872            24654  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Mar 2016              50557            27845  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Jun 2016              42358            61339  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Sep 2016              46852            90605  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Dec 2016              78351            33088&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;totalRevenue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Quarterly Total Revenue, AAPL (black) vs GE (red)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;&#34; alt=&#34;&#34; &gt;
&lt;/p&gt;
&lt;p&gt;You could also combine multiple calls to &lt;code&gt;extractLineItem()&lt;/code&gt; to calculate ratios not included in the output from &lt;code&gt;viewFinancials()&lt;/code&gt;. For example, you could divide operating income by total revenue to calculate operating margin.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;operatingIncome&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;extractLineItem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;operating income&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;operatingIncome&lt;/span&gt; 
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;##          AAPL.Operating.Income GE.Operating.Income  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Dec 2015                 24171                2863  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Mar 2016                 13987                 545  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Jun 2016                 10105                4736  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Sep 2016                 11761                6138  &lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;## Dec 2016                 23359                2892&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;plot&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;operatingIncome&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;totalRevenue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;main&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Quarterly Operating Margin, AAPL (black) vs GE (red)&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;&#34; alt=&#34;&#34; &gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>quantmod 0.4-6 on CRAN</title>
      <link>https://blog.fosstrading.com/2016/08/quantmod-0-4-6-on-cran/</link>
      <pubDate>Mon, 29 Aug 2016 11:38:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2016/08/quantmod-0-4-6-on-cran/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt; just accepted a bugfix release of &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt;.  The most pertinent changes were to fix getSymbols.oanda (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/36&#34;&gt;#36&lt;/a&gt;) and getOptionChain.yahoo (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/92&#34;&gt;#92&lt;/a&gt;).  It also includes a fix to addTRIX (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/72&#34;&gt;#72&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Oanda changed their URL format from http to https, and getSymbols.oanda did not follow the redirect.  Yahoo Finance changed the HTML for displaying options data, which broke getOptionChain.yahoo.  The fix downloads JSON instead of scraping HTML, so hopefully it will be less likely to break.  For more information, see the links to the GitHub issues above.&lt;/p&gt;
&lt;p&gt;I added documentation for getPrice (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/77&#34;&gt;#77&lt;/a&gt;), and removed the unused unsetSymbolLookup function and corresponding documentation (&lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues/115&#34;&gt;#115&lt;/a&gt;).&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g. &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;, &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;, etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;

    &lt;p&gt;I look forward to your questions and feedback! If you have a question, please ask on &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack Overflow&lt;/a&gt; and use the &lt;a href=&#34;http://stackoverflow.com/questions/tagged/r&#34;&gt;[r]&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/questions/tagged/quantmod&#34;&gt;[quantmod]&lt;/a&gt; tags.  Or you can send an email to the &lt;a href=&#34;https://stat.ethz.ch/mailman/listinfo/r-sig-finance&#34;&gt;R-SIG-Finance&lt;/a&gt; mailing list (you must subscribe to post). Open an &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/issues&#34;&gt;issue on GitHub&lt;/a&gt; if you find a bug or want to request a feature. Please &lt;a href=&#34;https://github.com/joshuaulrich/quantmod/blob/master/.github/CONTRIBUTING.md&#34;&gt;read the contributing guide&lt;/a&gt; first! It will help save time for both of us. ;-)&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

</description>
    </item>
    
    <item>
      <title>DataCamp course: Importing and managing financial data</title>
      <link>https://blog.fosstrading.com/2016/06/importing-and-managing-financial-data/</link>
      <pubDate>Fri, 17 Jun 2016 11:32:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2016/06/importing-and-managing-financial-data/</guid>
      <description>&lt;p&gt;The team at &lt;a href=&#34;https://www.datacamp.com/&#34;&gt;DataCamp&lt;/a&gt; announced a new R/Finance course series in a recent email:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Subject: Data Mining Tutorial, R/Finance course series, and more!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;R/Finance - A new course series in the works&lt;/strong&gt;&lt;br&gt;
We are working on a whole new course series on applied finance using R. This new series will cover topics such as time series (David S. Matteson), portfolio analysis (Kris Boudt), the xts and zoo packages (Jeffrey Ryan), and much more. Start our first course &lt;a href=&#34;https://www.datacamp.com/courses/introduction-to-credit-risk-modeling-in-r&#34;&gt;Intro to Credit Risk Modeling in R&lt;/a&gt; today.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I&amp;rsquo;m excited to announce that I&amp;rsquo;m working on a course for this new series! It will provide an introduction to importing and managing financial data.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;ve ever done anything with financial or economic time series, you know the data come in various shapes, sizes, and periodicities. Getting the data into R can be stressful and time-consuming, especially when you need to merge data from several different sources into one data set. This course will cover importing data from local files as well as from internet sources.&lt;/p&gt;
&lt;p&gt;The tentative course outline is below. I&amp;rsquo;d really appreciate your feedback on what should be included in this introductory course! So let me know if I&amp;rsquo;ve omitted something, or if you think any of the topics are too advanced.&lt;/p&gt;
&lt;p&gt;Introduction to importing and managing financial data&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Introduction and downloading data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;getSymbols design overview, Quandl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finding and downloading data from internet sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;E.g. getSymbols.yahoo, getSymbols.FRED, Quandl&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Loading and transforming multiple instruments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Checking for errors (i.e. summary stats, visualizing)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Managing data from multiple sources&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Setting per-instrument sources and default arguments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;setSymbolLookup, saveSymbolLookup, loadSymbolLookup, setDefaults&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling instruments names that clash or are not valid R object names&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aligning data with different periodicities&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Making irregular data regular&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aggregating to lowest frequency&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combining monthly with daily&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Combining daily with intraday&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Storing and updating data&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Creating an initial RData-backed storage&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Adjusting financial time-series&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Handling errors during update process&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>New quantmod and TTR on CRAN</title>
      <link>https://blog.fosstrading.com/2015/07/new-quantmod-and-ttr-on-cran/</link>
      <pubDate>Fri, 24 Jul 2015 16:04:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2015/07/new-quantmod-and-ttr-on-cran/</guid>
      <description>&lt;p&gt;I just sent &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod_0.4-5&lt;/a&gt; to &lt;a href=&#34;https://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt;, and &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR_0.23-0&lt;/a&gt; has been there for a couple weeks. I&amp;rsquo;d like to thank &lt;a href=&#34;http://www.quintuitive.com/&#34;&gt;Ivan Popivanov&lt;/a&gt; for many useful reports and patches to TTR. He provided patches to add &lt;code&gt;HMA()&lt;/code&gt; (Hull MA), &lt;code&gt;ALMA()&lt;/code&gt;, and &lt;code&gt;ultimateOscillator()&lt;/code&gt; functions.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://jtoll.com/&#34;&gt;James Toll&lt;/a&gt; provided a patch to the &lt;code&gt;volatility()&lt;/code&gt; function that uses a zero mean (instead of the sample mean) in close-to-close volatility. The other big change is that moving average functions no longer return objects with column names based on the input object column names. There are many other bug fixes (see the CHANGES file in the package).&lt;/p&gt;
&lt;p&gt;The biggest changes in quantmod were to fix &lt;code&gt;getSymbols.MySQL()&lt;/code&gt; to use the correct &lt;code&gt;dbConnect()&lt;/code&gt; call based on changes made in RMySQL_0.10 and to fix &lt;code&gt;getSymbols.FRED()&lt;/code&gt; to use https:// instead of http:// when downloading FRED data. &lt;code&gt;getSymbols.csv()&lt;/code&gt; also got some much-needed love.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;d also like to mention that development has moved to GitHub for both &lt;a href=&#34;https://github.com/joshuaulrich/TTR&#34;&gt;TTR&lt;/a&gt; and &lt;a href=&#34;https://github.com/joshuaulrich/quantmod&#34;&gt;quantmod&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Import Japanese equity data into R with quantmod 0.4-4</title>
      <link>https://blog.fosstrading.com/2015/03/import-japanese-equity-data-into-r/</link>
      <pubDate>Tue, 10 Mar 2015 12:09:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2015/03/import-japanese-equity-data-into-r/</guid>
      <description>&lt;p&gt;I pushed &lt;a href=&#34;http://cran.r-project.org/web/packages/quantmod/&#34;&gt;quantmod 0.4-4 to CRAN&lt;/a&gt; this weekend.  It adds a &lt;code&gt;getSymbols.yahooj&lt;/code&gt; function to pull stock data from Yahoo Finance Japan, and fixes issues in &lt;code&gt;getOptionChain.yahoo&lt;/code&gt; and &lt;code&gt;getSymbols.oanda&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Changes to the Yahoo Finance and Oanda websites broke the &lt;code&gt;getOptionChain.yahoo&lt;/code&gt; and &lt;code&gt;getSymbols.oanda&lt;/code&gt; functions, respectively.  I didn&amp;rsquo;t use &lt;code&gt;getOptionChain.yahoo&lt;/code&gt; much, so I’m not certain I restored all the prior functionality.  Let me know if there’s something I missed. I’d be glad to add a test case for that, or to add a test you&amp;rsquo;ve written.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;getSymbols.yahooj&lt;/code&gt; function is a major enhancement provided by &lt;a href=&#34;http://morannon.org/&#34;&gt;Wouter Thielen&lt;/a&gt;.  It allows quantmod users to pull stock data from Yahoo Finance Japan. &lt;/p&gt;
&lt;p&gt;Japanese ticker symbols usually start with a number and it is cumbersome to use variable names that start with a number in the R environment, so the string &amp;ldquo;YJ&amp;rdquo; will be prepended to each of the Symbols.  I recommend using &lt;code&gt;setSymbolLookup&lt;/code&gt; to prepend the ticker symbols with &amp;ldquo;YJ&amp;rdquo; yourself, so you can just use the main &lt;code&gt;getSymbols&lt;/code&gt; function.&lt;/p&gt;
&lt;p&gt;For example, if you want to pull Sony data, you would run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;quantmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;setSymbolLookup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;YJ6758.T&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;yahooj&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;getSymbols&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;YJ6758.T&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The full list of supported data sources for quantmod is now: Yahoo Finance-US, Yahoo Finance-Japan, Google Finance, csv, RData (including rds and rda), FRED, SQLite, MySQL, and Oanda. &lt;/p&gt;
&lt;p&gt;Contributions to add support for additional data sources are welcomed.  The existing &lt;code&gt;getSymbols&lt;/code&gt; functions are good templates to start from.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updated quantmod on CRAN</title>
      <link>https://blog.fosstrading.com/2014/12/updated-quantmod-on-cran/</link>
      <pubDate>Mon, 15 Dec 2014 09:43:00 -0600</pubDate>
      
      <guid>https://blog.fosstrading.com/2014/12/updated-quantmod-on-cran/</guid>
      <description>&lt;p&gt;An updated version of &lt;a href=&#34;http://www.quantmod.com/&#34;&gt;quantmod&lt;/a&gt; has just been released on &lt;a href=&#34;http://cran.r-project.org/&#34;&gt;CRAN&lt;/a&gt;.  This is my first submission as the new maintainer.  The major change was removing the dependency on the &lt;a href=&#34;http://cran.r-project.org/web/packages/Defaults/&#34;&gt;now-archived Defaults&lt;/a&gt; package.  End-users shouldn&amp;rsquo;t notice a difference, since I basically copied the necessary functionality from Defaults and added it to quantmod.&lt;/p&gt;
&lt;p&gt;There are also several bug fixes. A few worth noting are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://r-forge.r-project.org/tracker/index.php?func=detail&amp;amp;aid=4768&amp;amp;group_id=125&amp;amp;atid=544&#34;&gt;getSplits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-forge.r-project.org/tracker/index.php?func=detail&amp;amp;aid=5680&amp;amp;group_id=125&amp;amp;atid=544&#34;&gt;adjustOHLC&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-forge.r-project.org/tracker/index.php?func=detail&amp;amp;aid=735&amp;amp;group_id=125&amp;amp;atid=544&#34;&gt;getSymbols (when adjust=TRUE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-forge.r-project.org/tracker/index.php?func=detail&amp;amp;aid=2665&amp;amp;group_id=125&amp;amp;atid=544&#34;&gt;saveSymbols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-forge.r-project.org/tracker/index.php?func=detail&amp;amp;aid=5950&amp;amp;group_id=125&amp;amp;atid=544&#34;&gt;newTA&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://r-forge.r-project.org/tracker/index.php?func=detail&amp;amp;aid=5807&amp;amp;group_id=125&amp;amp;atid=544&#34;&gt;findValleys&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Packages featured with Inference for R</title>
      <link>https://blog.fosstrading.com/2009/05/packages-featured-with-inference-for-r/</link>
      <pubDate>Tue, 12 May 2009 09:22:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2009/05/packages-featured-with-inference-for-r/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://r-forge.r-project.org/projects/quantmod/&#34;&gt;quantmod&lt;/a&gt;, &lt;a href=&#34;http://r-forge.r-project.org/projects/ttr/&#34;&gt;TTR&lt;/a&gt;, and &lt;a href=&#34;http://r-forge.r-project.org/projects/xts/&#34;&gt;xts&lt;/a&gt; were (not so) recently featured on the &lt;a href=&#34;http://inferenceforr.com/blog/default.aspx&#34;&gt;Inference for R Blog&lt;/a&gt;. &lt;a href=&#34;http://inferenceforr.com/default.aspx&#34;&gt;Inference for R&lt;/a&gt; is a Integrated Development Environment (IDE) designed specifically for &lt;a href=&#34;http://www.r-project.org/&#34;&gt;R&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;http://inferenceforr.com/blog/Lists/Posts/Post.aspx?ID=17&#34;&gt;The post&lt;/a&gt; gives an example of how to easily perform advanced financial stock analysis using Inference in Excel.&lt;/p&gt;
&lt;p&gt;I appreciate how they&amp;rsquo;re making &lt;a href=&#34;http://www.r-project.org/&#34;&gt;R&lt;/a&gt; more accessible to a general audience, even though I like a command line interface and my preferred development environment is &lt;a href=&#34;http://www.vim.org&#34;&gt;vim&lt;/a&gt;. :-)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
