<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>TimeBase on FOSS Trading</title>
    <link>https://blog.fosstrading.com/search/label/TimeBase/</link>
    <description>Recent content in TimeBase on FOSS Trading</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Jun 2023 10:21:00 -0500</lastBuildDate><atom:link href="https://blog.fosstrading.com/search/label/TimeBase/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Running TimeBase in Docker</title>
      <link>https://blog.fosstrading.com/2023/06/running-timebase-in-docker/</link>
      <pubDate>Sat, 24 Jun 2023 10:21:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2023/06/running-timebase-in-docker/</guid>
      <description>&lt;p&gt;This is the second post in the series on using &lt;a href=&#34;https://timebase.info/&#34;&gt;TimeBase&lt;/a&gt; to stream real-time market data. This post covers using &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; to run TimeBase and the &lt;a href=&#34;https://kb.timebase.info/docs/development/tools/Web%20Admin/admin_about&#34;&gt;TimeBase Web Administrator&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h3&gt;
&lt;p&gt;Docker installation and configuration is outside the scope of this post. Docker has a &lt;a href=&#34;https://www.docker.com/get-started/&#34;&gt;Get Started&lt;/a&gt; page to help you get set up.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;ll be using Docker via Ubuntu and the command line interface. I know this approach is probably very advanced for most readers, but please bear with me. The concepts should be the same if you&amp;rsquo;re using the &lt;a href=&#34;https://docs.docker.com/desktop/&#34;&gt;Docker Desktop&lt;/a&gt; GUI instead.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re not familiar with Docker, an &amp;ldquo;image&amp;rdquo; contains all the necessary information to run an instance of the application. A &amp;ldquo;container&amp;rdquo; is a running instance of an image.&lt;/p&gt;
&lt;h3 id=&#34;running-the-docker-containers&#34;&gt;Running the Docker Containers&lt;/h3&gt;
&lt;p&gt;First we need to get the container images from &lt;a href=&#34;https://hub.docker.com/&#34;&gt;Docker Hub&lt;/a&gt;. I will use the &lt;code&gt;docker pull&lt;/code&gt; command.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pull the TimeBase image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull finos/timebase-ce-server:6.1.16
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# pull the Web Admin image&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker pull epam/timebase-ws-server:1.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The TimeBase documentation has a page on &lt;a href=&#34;https://kb.timebase.info/community/deployment/docker&#34;&gt;deploying with Docker&lt;/a&gt;. This post closely follows those examples.&lt;/p&gt;
&lt;p&gt;One major difference is that TimeBase documentation uses the &lt;code&gt;--link&lt;/code&gt; option to allow the containers to talk to each other, but the Docker documentation says that is a legacy feature that may be removed. The currently preferred method is to create a user-defined network.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# create a user-defined network so the containers to see each other&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker network create --driver bridge timebase-net
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# make sure the network was created&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker network ls
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By default, the docker containers will write data to a disk that&amp;rsquo;s only available to the container. You won&amp;rsquo;t be able to access the data from your computer or if the container isn&amp;rsquo;t running. There&amp;rsquo;s a &lt;code&gt;--volume&lt;/code&gt; option to specify a mapping between a directory in the container and a directory on your local machine. I&amp;rsquo;m not going to use that here because you have to run the container as root in order for it to write to your local file system.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --rm --detach &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --publish 8011:8011 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --name timebase-server &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --user deltix:deltix &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --ulimit&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;nofile&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;65536:65536 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --network timebase-net &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    finos/timebase-ce-server:6.1.16
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here are the descriptions of the options used:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt;: Automatically remove the container when it exits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--detach&lt;/code&gt;: Run the container in the background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--publish&lt;/code&gt;: Map the container&amp;rsquo;s port 8011 to my computer&amp;rsquo;s port 8011&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt;: Assign a name to the container&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--user&lt;/code&gt;: Run the container as the &amp;lsquo;deltix&amp;rsquo; user instead of &amp;lsquo;root&amp;rsquo;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--ulimit&lt;/code&gt;: Set user process resource limits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--network&lt;/code&gt;: Use the &amp;rsquo;timebase-net&amp;rsquo; network&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we can run the Web Admin container. Make sure to use the same network (&lt;code&gt;timebase-net&lt;/code&gt;) and make sure the host name (&lt;code&gt;dxtick://timebase-server&lt;/code&gt;) is the same as the name you used for the TimeBase container (i.e. &amp;rsquo;timebase-server&amp;rsquo; in this case). The &lt;code&gt;--env&lt;/code&gt; option allows us to set environment variables. These are used to control various &lt;a href=&#34;https://kb.timebase.info/community/development/tools/Web%20Admin/admin_config#deployment&#34;&gt;configuration options&lt;/a&gt; (note that these configuration options are for running a local instance, but they give you an idea of what you can change).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;docker run --rm --detach &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --publish 8099:8099 &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --name timebase-admin &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --env &lt;span class=&#34;s2&#34;&gt;&amp;#34;JAVA_OPTS=-Dtimebase.url=dxtick://timebase-server:8011&amp;#34;&lt;/span&gt; &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    --network timebase-net &lt;span class=&#34;se&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;se&#34;&gt;&lt;/span&gt;    epam/timebase-ws-server:1.0
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We can use the Web Admin&amp;rsquo;s interface once it&amp;rsquo;s running. Open a browser and enter localhost:8099 in the address bar. That should take you to the login page. The default username/password is &lt;code&gt;admin/admin&lt;/code&gt;. After you log in you should see a page like the image below. The only stream in the database is &lt;code&gt;events#&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.fosstrading.com/2023/06/running-timebase-in-docker/web-admin-initial-contents.png&#34;&gt;&lt;img src=&#34;web-admin-initial-contents.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Although this post is about &lt;em&gt;running&lt;/em&gt; TimeBase and the Web Admin, I&amp;rsquo;m not going to end it without showing a little functionality.&lt;/p&gt;
&lt;h3 id=&#34;import-data&#34;&gt;Import Data&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s import some data and take a quick look. Download this &lt;a href=&#34;https://blog.fosstrading.com/2023/06/running-timebase-in-docker/running-timebase-in-docker-bars.qsmsg.gz&#34;&gt;data file&lt;/a&gt;. Then click the &amp;lsquo;Import from QSMSG&amp;rsquo; button highlighted in red below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.fosstrading.com/2023/06/running-timebase-in-docker/web-admin-import-qsmsg-button.png&#34;&gt;&lt;img src=&#34;web-admin-import-qsmsg-button.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Navigate to the file you just downloaded. Name the stream &amp;lsquo;bars&amp;rsquo;. You can leave the Description and Symbols fields blank, and leave Periodicity set to irregular.&lt;/p&gt;
&lt;p&gt;Now click the &amp;lsquo;bars&amp;rsquo; stream in the navigation bar on the left. You should see the data you just imported. It looks like the image below.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.fosstrading.com/2023/06/running-timebase-in-docker/web-admin-after-importing-bars.png&#34;&gt;&lt;img src=&#34;web-admin-after-importing-bars.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Okay, that&amp;rsquo;s all for now. In the next post, we&amp;rsquo;ll set up a data connector and watch some data stream into the database!&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;h3&gt;Other Posts in this TimeBase Series&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&#34;https://blog.fosstrading.com/2023/06/streaming-data-with-timebase/&#34;&gt;Streaming Market Data with TimeBase&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://blog.fosstrading.com/2023/06/running-timebase-in-docker/&#34;&gt;Running TimeBase in Docker&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g.
      &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/blotter/&#34;&gt;blotter&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/quantstrat/&#34;&gt;quantstrat&lt;/a&gt;,
      etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Streaming Market Data with TimeBase</title>
      <link>https://blog.fosstrading.com/2023/06/streaming-data-with-timebase/</link>
      <pubDate>Mon, 19 Jun 2023 12:14:00 -0500</pubDate>
      
      <guid>https://blog.fosstrading.com/2023/06/streaming-data-with-timebase/</guid>
      <description>&lt;p&gt;This is the first post of a series on using &lt;a href=&#34;https://timebase.info/&#34;&gt;TimeBase&lt;/a&gt; to stream real-time market data. TimeBase is a high performance event-based time series database and message broker. I used it on a proprietary trading desk that made markets in futures, and currently use it to build and test equity trading strategies. It was &lt;a href=&#34;https://github.com/finos/TimeBase-CE/&#34;&gt;released as open-source&lt;/a&gt; in February 2021.&lt;/p&gt;
&lt;h3 id=&#34;preface&#34;&gt;Preface&lt;/h3&gt;
&lt;p&gt;I am not affiliated with the company that created and maintains TimeBase (Deltix, now EPAM). I&amp;rsquo;m not currently compensated by them in any way for promoting their product. I&amp;rsquo;m merely a happy user who is excited that TimeBase is open source and I can show you how to do some cool stuff with it.&lt;/p&gt;
&lt;h3 id=&#34;whats-your-problem&#34;&gt;What&amp;rsquo;s Your Problem?&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://timebase.info/&#34;&gt;TimeBase&lt;/a&gt; addresses several key needs in automated trading. You need to process large amounts of real-time market data. This includes trades, best bid/offer, and/or the entire limit order book. You use this data to calculate indicators/features, determine when and where to place orders, monitoring unrealized P&amp;amp;L, and monitoring/managing risk of your positions.&lt;/p&gt;
&lt;p&gt;All data in the trading system needs to be processed quickly and absolutely must be processed in strict time order. This is not trivial when you need to interleave data from multiple sources (e.g. exchanges and the trading system itself).
The &lt;a href=&#34;https://medium.com/prooftrading/proof-engineering-the-algorithmic-trading-platform-b9c2f195433d#d545&#34;&gt;System Architecture&lt;/a&gt; section of &amp;ldquo;The Algorithmic Trading Platform&amp;rdquo; by Prerak Sanghvi describes the benefits of using a strictly time-sequenced stream of events. To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Synchronized: every system component always receives the same data in the same order.&lt;/li&gt;
&lt;li&gt;Observable: the system is deterministic and can be debugged offline by replaying the data.&lt;/li&gt;
&lt;li&gt;Auditable: You can re-create the state of the system at any point in time.&lt;/li&gt;
&lt;li&gt;Streamlined: Tasks like logging and persisting to disk can be delegated to components that are off the critical path.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The data also needs be stored for analysis and debugging. Analysis includes things like running backtests, post-trade evaluation, and investigating market behavior. &lt;a href=&#34;https://medium.com/prooftrading/selecting-a-database-for-an-algorithmic-trading-system-2d25f9648d02&#34;&gt;&amp;ldquo;Selecting a Database for an Algorithmic Trading System&amp;rdquo;
&lt;/a&gt; by Prerak Sanghvi discusses the necessary components of a time-series database for algorithmic trading. To summarize:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fast data ingest: millions of records per second (quote data can be 100+ million records per day)&lt;/li&gt;
&lt;li&gt;Ability to process large amounts of historical data for patterns and trends&lt;/li&gt;
&lt;li&gt;Time series operations and real-time analytics (e.g. window functions, aggregations, as-of joins)&lt;/li&gt;
&lt;li&gt;Expressive query language&lt;/li&gt;
&lt;li&gt;Optimized on-disk layout&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;timebase-vs-alternatives&#34;&gt;TimeBase vs Alternatives&lt;/h3&gt;
&lt;p&gt;Why use TimeBase instead of other open-source projects like &lt;a href=&#34;https://www.rabbitmq.com/&#34;&gt;RabbitMQ&lt;/a&gt;, &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Kafka&lt;/a&gt;, &lt;a href=&#34;https://www.influxdata.com/&#34;&gt;InfluxDB&lt;/a&gt;, &lt;a href=&#34;https://www.timescale.com/&#34;&gt;TimeScaleDB&lt;/a&gt;, or &lt;a href=&#34;https://clickhouse.com/&#34;&gt;ClickHouse&lt;/a&gt;? The main reason is that TimeBase is both a &lt;a href=&#34;https://en.wikipedia.org/wiki/Message_broker&#34;&gt;message broker&lt;/a&gt; &lt;em&gt;and&lt;/em&gt; a &lt;a href=&#34;https://en.wikipedia.org/wiki/Time_series_database&#34;&gt;time-series database&lt;/a&gt;. The TimeBase website has its own &lt;a href=&#34;https://timebase.info/why-timebase/&#34;&gt;&amp;ldquo;Why TimeBase&amp;rdquo; page&lt;/a&gt; and pages that compare popular &lt;a href=&#34;https://timebase.info/why-timebase/tsdb-comparison.html&#34;&gt;time-series databases&lt;/a&gt; and &lt;a href=&#34;https://timebase.info/why-timebase/message-brokers-comparison.html&#34;&gt;message brokers&lt;/a&gt;. Here&amp;rsquo;s a summary of the benefits of TimeBase from those pages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Based on configuration, it supports microsecond latencies or the ability to handle millions of messages per second on commodity hardware.&lt;/li&gt;
&lt;li&gt;Enforces stream schemas with heterogeneous and potentially complex &lt;a href=&#34;https://kb.timebase.info/community/overview/messages&#34;&gt;message structures&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The same &lt;a href=&#34;https://kb.timebase.info/community/development/libs&#34;&gt;APIs&lt;/a&gt; can be used to stream real-time data &lt;em&gt;and&lt;/em&gt; replay historical data.&lt;/li&gt;
&lt;li&gt;Able to &lt;a href=&#34;https://kb.timebase.info/community/technology/replication/replication_intro&#34;&gt;replicate data&lt;/a&gt; to other TimeBase instances or applications.&lt;/li&gt;
&lt;li&gt;The open-source community edition has multiple crypto exchange data connectors. The enterprise edition has 50+ built-in data connectors.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;timebase-structure&#34;&gt;TimeBase Structure&lt;/h3&gt;
&lt;p&gt;This is a high-level summary of the &lt;a href=&#34;https://timebase.info/architecture.html&#34;&gt;TimeBase architecture page&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Data connectors&lt;/strong&gt; handle connecting to external data sources and translating their data into the TimeBase format. There are many open source &lt;a href=&#34;https://github.com/epam/TimebaseCryptoConnectors&#34;&gt;crypto exchange data connectors&lt;/a&gt;. The enterprise edition has another 50+ data connectors to all major exchanges and many data vendors.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The message broker&lt;/strong&gt; provides a &lt;a href=&#34;https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern&#34;&gt;publish/subscribe&lt;/a&gt; pattern to write/read streaming data. The data is processed via readers and writers to &lt;a href=&#34;https://kb.timebase.info/community/overview/streams&#34;&gt;streams&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Writers can only write to one stream. Readers can consume multiple streams simultaneously and the messages from every stream are interleaved so that every message consumed is always in guaranteed time order regardless of which stream they come from. It is extremely important that every consumer receives data strictly sequenced by time!&lt;/p&gt;
&lt;p&gt;There are two types of streams, durable and transient. Durable streams are persisted to disk. Transient streams are only in memory and can be &lt;em&gt;lossy&lt;/em&gt; or &lt;em&gt;lossless&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Writers to &lt;em&gt;lossy&lt;/em&gt; streams are not blocked by slow readers, so slow readers may not receive every message but always receive the next available message once they finish processing a message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Writers to &lt;em&gt;lossless&lt;/em&gt; streams are blocked by slow readers, so every reader always receives every message and every reader can only process data as fast as the slowest reader.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;The database&lt;/strong&gt; handles reading/writing data from/to disk, importing and exporting data, replicating data to other applications, and can aggregate data to regular bars. It has a query language (&lt;a href=&#34;https://kb.timebase.info/community/development/qql/QQL%205.5/qql-tut-intro&#34;&gt;QQL&lt;/a&gt;) you can use to extract, filter, aggregate, and transform data in streams.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s also an open-source &lt;a href=&#34;https://kb.timebase.info/community/development/tools/Web%20Admin/admin_config_ce&#34;&gt;Web Administrator&lt;/a&gt; you can use to manipulate streams (create, delete, edit, import/export). It also allows you to view data, including monitoring live data streaming in to the database.&lt;/p&gt;
&lt;h3 id=&#34;whats-next&#34;&gt;What&amp;rsquo;s Next?&lt;/h3&gt;
&lt;p&gt;Later posts in this series will cover at least the topics below. Please leave a comment or contact me with any other things you would like to see!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Building and running TimeBase from source/Docker&lt;/li&gt;
&lt;li&gt;Building and running the Web Administrator from source/Docker&lt;/li&gt;
&lt;li&gt;Setting up a data connector&lt;/li&gt;
&lt;li&gt;Introduction to the Web Administrator (viewing/monitoring data, import/export)&lt;/li&gt;
&lt;li&gt;Introduction to QQL, the quant query language&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Thanks to &lt;a href=&#34;https://robotjames.com/&#34;&gt;TheRobotJames&lt;/a&gt; for helpful feedback, and to &lt;a href=&#34;https://twitter.com/gestaltu&#34;&gt;Adam Butler&lt;/a&gt; for encouraging me to write more!&lt;/p&gt;
&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;h3&gt;Other Posts in this TimeBase Series&lt;/h3&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&#34;https://blog.fosstrading.com/2023/06/streaming-data-with-timebase/&#34;&gt;Streaming Market Data with TimeBase&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&#34;https://blog.fosstrading.com/2023/06/running-timebase-in-docker/&#34;&gt;Running TimeBase in Docker&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;container&#34; role=&#34;main&#34;&gt;
  &lt;div class=&#34;row&#34;&gt;
    &lt;hr&gt;
    &lt;p&gt;If you love using my open-source work (e.g.
      &lt;a href=&#34;https://cran.r-project.org/package=quantmod&#34;&gt;quantmod&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=TTR&#34;&gt;TTR&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=xts&#34;&gt;xts&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=IBrokers&#34;&gt;IBrokers&lt;/a&gt;,
      &lt;a href=&#34;https://cran.r-project.org/package=microbenchmark&#34;&gt;microbenchmark&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/blotter/&#34;&gt;blotter&lt;/a&gt;,
      &lt;a href=&#34;https://github.com/braverock/quantstrat/&#34;&gt;quantstrat&lt;/a&gt;,
      etc.), you can give back by &lt;a href=&#34;https://github.com/sponsors/joshuaulrich/&#34;&gt;sponsoring me on GitHub&lt;/a&gt;. I truly appreciate anything you&amp;rsquo;re willing and able to give!&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;

</description>
    </item>
    
  </channel>
</rss>
